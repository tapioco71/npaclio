%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 70 0 R /F4 79 0 R /F5 92 0 R /F6 186 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
5 0 obj
<<
/Annots [ 4 0 R ] /Contents 224 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
6 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 62.69291 711.0236 134.9229 723.0236 ] /Subtype /Link /Type /Annot
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 527.0227 711.7736 532.5827 723.7736 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 420.0236 0 ] /Rect [ 82.69291 693.0236 191.6329 705.0236 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 420.0236 0 ] /Rect [ 527.0227 693.7736 532.5827 705.7736 ] /Subtype /Link /Type /Annot
>>
endobj
10 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 360.0236 0 ] /Rect [ 82.69291 675.0236 179.9729 687.0236 ] /Subtype /Link /Type /Annot
>>
endobj
11 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 62.69291 360.0236 0 ] /Rect [ 527.0227 675.7736 532.5827 687.7736 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 83 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 657.0236 205.5329 669.0236 ] /Subtype /Link /Type /Annot
>>
endobj
13 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 83 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 527.0227 657.7736 532.5827 669.7736 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 87 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 62.69291 639.0236 329.4429 651.0236 ] /Subtype /Link /Type /Annot
>>
endobj
15 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 87 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 527.0227 639.7736 532.5827 651.7736 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 89 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 621.0236 204.4029 633.0236 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 89 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 527.0227 621.7736 532.5827 633.7736 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 91 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 603.0236 174.9429 615.0236 ] /Subtype /Link /Type /Annot
>>
endobj
19 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 91 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 603.7736 532.5827 615.7736 ] /Subtype /Link /Type /Annot
>>
endobj
20 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 91 0 R /XYZ 62.69291 693.0236 0 ] /Rect [ 102.6929 585.0236 311.6529 597.0236 ] /Subtype /Link /Type /Annot
>>
endobj
21 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 91 0 R /XYZ 62.69291 693.0236 0 ] /Rect [ 521.4627 585.7736 532.5827 597.7736 ] /Subtype /Link /Type /Annot
>>
endobj
22 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 94 0 R /XYZ 62.69291 324.1229 0 ] /Rect [ 102.6929 567.0236 311.6529 579.0236 ] /Subtype /Link /Type /Annot
>>
endobj
23 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 94 0 R /XYZ 62.69291 324.1229 0 ] /Rect [ 521.4627 567.7736 532.5827 579.7736 ] /Subtype /Link /Type /Annot
>>
endobj
24 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 96 0 R /XYZ 62.69291 384.0108 0 ] /Rect [ 102.6929 549.0236 311.6529 561.0236 ] /Subtype /Link /Type /Annot
>>
endobj
25 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 96 0 R /XYZ 62.69291 384.0108 0 ] /Rect [ 521.4627 549.7736 532.5827 561.7736 ] /Subtype /Link /Type /Annot
>>
endobj
26 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 102 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 531.0236 178.8329 543.0236 ] /Subtype /Link /Type /Annot
>>
endobj
27 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 102 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 531.7736 532.5827 543.7736 ] /Subtype /Link /Type /Annot
>>
endobj
28 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 102 0 R /XYZ 62.69291 687.0236 0 ] /Rect [ 102.6929 513.0236 319.9829 525.0236 ] /Subtype /Link /Type /Annot
>>
endobj
29 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 102 0 R /XYZ 62.69291 687.0236 0 ] /Rect [ 521.4627 513.7736 532.5827 525.7736 ] /Subtype /Link /Type /Annot
>>
endobj
30 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 106 0 R /XYZ 62.69291 627.0236 0 ] /Rect [ 102.6929 495.0236 319.9829 507.0236 ] /Subtype /Link /Type /Annot
>>
endobj
31 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 106 0 R /XYZ 62.69291 627.0236 0 ] /Rect [ 521.4627 495.7736 532.5827 507.7736 ] /Subtype /Link /Type /Annot
>>
endobj
32 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 108 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 102.6929 477.0236 319.9829 489.0236 ] /Subtype /Link /Type /Annot
>>
endobj
33 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 108 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 477.7736 532.5827 489.7736 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 112 0 R /XYZ 62.69291 655.8236 0 ] /Rect [ 102.6929 459.0236 319.9829 471.0236 ] /Subtype /Link /Type /Annot
>>
endobj
35 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 112 0 R /XYZ 62.69291 655.8236 0 ] /Rect [ 521.4627 459.7736 532.5827 471.7736 ] /Subtype /Link /Type /Annot
>>
endobj
36 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 120 0 R /XYZ 62.69291 703.8236 0 ] /Rect [ 102.6929 441.0236 290.5229 453.0236 ] /Subtype /Link /Type /Annot
>>
endobj
37 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 120 0 R /XYZ 62.69291 703.8236 0 ] /Rect [ 521.4627 441.7736 532.5827 453.7736 ] /Subtype /Link /Type /Annot
>>
endobj
38 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 122 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 423.0236 239.4329 435.0236 ] /Subtype /Link /Type /Annot
>>
endobj
39 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 122 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 423.7736 532.5827 435.7736 ] /Subtype /Link /Type /Annot
>>
endobj
40 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 124 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 405.0236 161.0629 417.0236 ] /Subtype /Link /Type /Annot
>>
endobj
41 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 124 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 405.7736 532.5827 417.7736 ] /Subtype /Link /Type /Annot
>>
endobj
42 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 124 0 R /XYZ 62.69291 657.0236 0 ] /Rect [ 102.6929 387.0236 297.7729 399.0236 ] /Subtype /Link /Type /Annot
>>
endobj
43 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 124 0 R /XYZ 62.69291 657.0236 0 ] /Rect [ 521.4627 387.7736 532.5827 399.7736 ] /Subtype /Link /Type /Annot
>>
endobj
44 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 126 0 R /XYZ 62.69291 325.9469 0 ] /Rect [ 102.6929 369.0236 303.3329 381.0236 ] /Subtype /Link /Type /Annot
>>
endobj
45 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 126 0 R /XYZ 62.69291 325.9469 0 ] /Rect [ 521.4627 369.7736 532.5827 381.7736 ] /Subtype /Link /Type /Annot
>>
endobj
46 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 62.69291 693.0236 0 ] /Rect [ 102.6929 351.0236 303.3329 363.0236 ] /Subtype /Link /Type /Annot
>>
endobj
47 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 62.69291 693.0236 0 ] /Rect [ 521.4627 351.7736 532.5827 363.7736 ] /Subtype /Link /Type /Annot
>>
endobj
48 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 142 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 333.0236 164.9529 345.0236 ] /Subtype /Link /Type /Annot
>>
endobj
49 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 142 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 333.7736 532.5827 345.7736 ] /Subtype /Link /Type /Annot
>>
endobj
50 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 142 0 R /XYZ 62.69291 681.0236 0 ] /Rect [ 102.6929 315.0236 306.1029 327.0236 ] /Subtype /Link /Type /Annot
>>
endobj
51 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 142 0 R /XYZ 62.69291 681.0236 0 ] /Rect [ 521.4627 315.7736 532.5827 327.7736 ] /Subtype /Link /Type /Annot
>>
endobj
52 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 148 0 R /XYZ 62.69291 619.8236 0 ] /Rect [ 102.6929 297.0236 306.1029 309.0236 ] /Subtype /Link /Type /Annot
>>
endobj
53 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 148 0 R /XYZ 62.69291 619.8236 0 ] /Rect [ 521.4627 297.7736 532.5827 309.7736 ] /Subtype /Link /Type /Annot
>>
endobj
54 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 62.69291 449.8236 0 ] /Rect [ 102.6929 279.0236 306.1029 291.0236 ] /Subtype /Link /Type /Annot
>>
endobj
55 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 62.69291 449.8236 0 ] /Rect [ 521.4627 279.7736 532.5827 291.7736 ] /Subtype /Link /Type /Annot
>>
endobj
56 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 62.69291 307.8254 0 ] /Rect [ 102.6929 261.0236 306.1029 273.0236 ] /Subtype /Link /Type /Annot
>>
endobj
57 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 62.69291 307.8254 0 ] /Rect [ 521.4627 261.7736 532.5827 273.7736 ] /Subtype /Link /Type /Annot
>>
endobj
58 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 180 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 243.0236 181.0629 255.0236 ] /Subtype /Link /Type /Annot
>>
endobj
59 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 180 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 243.7736 532.5827 255.7736 ] /Subtype /Link /Type /Annot
>>
endobj
60 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 82.69291 225.0236 156.0729 237.0236 ] /Subtype /Link /Type /Annot
>>
endobj
61 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 225.7736 532.5827 237.7736 ] /Subtype /Link /Type /Annot
>>
endobj
62 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 681.0236 0 ] /Rect [ 102.6929 207.0236 183.8429 219.0236 ] /Subtype /Link /Type /Annot
>>
endobj
63 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 681.0236 0 ] /Rect [ 521.4627 207.7736 532.5827 219.7736 ] /Subtype /Link /Type /Annot
>>
endobj
64 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 396.0236 0 ] /Rect [ 102.6929 189.0236 186.0629 201.0236 ] /Subtype /Link /Type /Annot
>>
endobj
65 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 396.0236 0 ] /Rect [ 521.4627 189.7736 532.5827 201.7736 ] /Subtype /Link /Type /Annot
>>
endobj
66 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 188 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 62.69291 171.0236 137.7129 183.0236 ] /Subtype /Link /Type /Annot
>>
endobj
67 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 188 0 R /XYZ 62.69291 753.0236 0 ] /Rect [ 521.4627 171.7736 532.5827 183.7736 ] /Subtype /Link /Type /Annot
>>
endobj
68 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
69 0 obj
<<
/Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 
  16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 
  26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 
  36 0 R 37 0 R 38 0 R 39 0 R 40 0 R 41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 
  46 0 R 47 0 R 48 0 R 49 0 R 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 
  56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 
  66 0 R 67 0 R 68 0 R ] /Contents 225 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
70 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
71 0 obj
<<
/A <<
/S /URI /Type /Action /URI (mailto:psilord@cs.wisc.edu)
>> /Border [ 0 0 0 ] /Rect [ 332.6197 684.0236 423.8997 696.0236 ] /Subtype /Link /Type /Annot
>>
endobj
72 0 obj
<<
/A <<
/S /URI /Type /Action /URI (mailto:angelo.rossi.homelab@gmail.com)
>> /Border [ 0 0 0 ] /Rect [ 339.2897 666.0236 490.0397 678.0236 ] /Subtype /Link /Type /Annot
>>
endobj
73 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
74 0 obj
<<
/Annots [ 71 0 R 72 0 R 73 0 R ] /Contents 226 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
75 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://common-lisp.net/project/iolib/download.shtml)
>> /Border [ 0 0 0 ] /Rect [ 88.53291 653.0236 312.5029 665.0236 ] /Subtype /Link /Type /Annot
>>
endobj
76 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
77 0 obj
<<
/Annots [ 75 0 R 76 0 R ] /Contents 227 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
78 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 188 0 R /XYZ 68.69291 642.9843 0 ] /Rect [ 382.4829 707.4236 436.6947 717.0236 ] /Subtype /Link /Type /Annot
>>
endobj
79 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
80 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
81 0 obj
<<
/Annots [ 78 0 R 80 0 R ] /Contents 228 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
82 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
83 0 obj
<<
/Annots [ 82 0 R ] /Contents 229 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
84 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
85 0 obj
<<
/Annots [ 84 0 R ] /Contents 230 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
86 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
87 0 obj
<<
/Annots [ 86 0 R ] /Contents 231 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
88 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
89 0 obj
<<
/Annots [ 88 0 R ] /Contents 232 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
90 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
91 0 obj
<<
/Annots [ 90 0 R ] /Contents 233 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
92 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
93 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
94 0 obj
<<
/Annots [ 93 0 R ] /Contents 234 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
95 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
96 0 obj
<<
/Annots [ 95 0 R ] /Contents 235 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
97 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
98 0 obj
<<
/Annots [ 97 0 R ] /Contents 236 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
99 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
100 0 obj
<<
/Annots [ 99 0 R ] /Contents 237 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
101 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
102 0 obj
<<
/Annots [ 101 0 R ] /Contents 238 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
103 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
104 0 obj
<<
/Annots [ 103 0 R ] /Contents 239 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
105 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
106 0 obj
<<
/Annots [ 105 0 R ] /Contents 240 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
107 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
108 0 obj
<<
/Annots [ 107 0 R ] /Contents 241 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
109 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
110 0 obj
<<
/Annots [ 109 0 R ] /Contents 242 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
111 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
112 0 obj
<<
/Annots [ 111 0 R ] /Contents 243 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
113 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
114 0 obj
<<
/Annots [ 113 0 R ] /Contents 244 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
115 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
116 0 obj
<<
/Annots [ 115 0 R ] /Contents 245 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
117 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
118 0 obj
<<
/Annots [ 117 0 R ] /Contents 246 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
119 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
120 0 obj
<<
/Annots [ 119 0 R ] /Contents 247 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
121 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
122 0 obj
<<
/Annots [ 121 0 R ] /Contents 248 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
123 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
124 0 obj
<<
/Annots [ 123 0 R ] /Contents 249 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
125 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
126 0 obj
<<
/Annots [ 125 0 R ] /Contents 250 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
127 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
128 0 obj
<<
/Annots [ 127 0 R ] /Contents 251 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
129 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
130 0 obj
<<
/Annots [ 129 0 R ] /Contents 252 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
131 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
132 0 obj
<<
/Annots [ 131 0 R ] /Contents 253 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
133 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
134 0 obj
<<
/Annots [ 133 0 R ] /Contents 254 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
135 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
136 0 obj
<<
/Annots [ 135 0 R ] /Contents 255 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
137 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
138 0 obj
<<
/Annots [ 137 0 R ] /Contents 256 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
139 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
140 0 obj
<<
/Annots [ 139 0 R ] /Contents 257 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
141 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
142 0 obj
<<
/Annots [ 141 0 R ] /Contents 258 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
143 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
144 0 obj
<<
/Annots [ 143 0 R ] /Contents 259 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
145 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
146 0 obj
<<
/Annots [ 145 0 R ] /Contents 260 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
147 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
148 0 obj
<<
/Annots [ 147 0 R ] /Contents 261 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
149 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
150 0 obj
<<
/Annots [ 149 0 R ] /Contents 262 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
151 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
152 0 obj
<<
/Annots [ 151 0 R ] /Contents 263 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
153 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
154 0 obj
<<
/Annots [ 153 0 R ] /Contents 264 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
155 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
156 0 obj
<<
/Annots [ 155 0 R ] /Contents 265 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
157 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
158 0 obj
<<
/Annots [ 157 0 R ] /Contents 266 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
159 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
160 0 obj
<<
/Annots [ 159 0 R ] /Contents 267 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
161 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
162 0 obj
<<
/Annots [ 161 0 R ] /Contents 268 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
163 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
164 0 obj
<<
/Annots [ 163 0 R ] /Contents 269 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
165 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
166 0 obj
<<
/Annots [ 165 0 R ] /Contents 270 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
167 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
168 0 obj
<<
/Annots [ 167 0 R ] /Contents 271 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
169 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
170 0 obj
<<
/Annots [ 169 0 R ] /Contents 272 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
171 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
172 0 obj
<<
/Annots [ 171 0 R ] /Contents 273 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
173 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
174 0 obj
<<
/Annots [ 173 0 R ] /Contents 274 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
175 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
176 0 obj
<<
/Annots [ 175 0 R ] /Contents 275 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
177 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
178 0 obj
<<
/Annots [ 177 0 R ] /Contents 276 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
179 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
180 0 obj
<<
/Annots [ 179 0 R ] /Contents 277 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
181 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
182 0 obj
<<
/Annots [ 181 0 R ] /Contents 278 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
183 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
184 0 obj
<<
/Annots [ 183 0 R ] /Contents 279 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
185 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 81 0 R /XYZ 382.4829 716.0236 0 ] /Rect [ 68.69291 628.9843 137.6129 640.9843 ] /Subtype /Link /Type /Annot
>>
endobj
186 0 obj
<<
/BaseFont /ZapfDingbats /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
187 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://pages.cs.wisc.edu/~psilord/)
>> /Border [ 0 0 0 ] /Rect [ 62.69291 60.44291 215.2629 72.44291 ] /Subtype /Link /Type /Annot
>>
endobj
188 0 obj
<<
/Annots [ 185 0 R 187 0 R ] /Contents 280 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 223 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
189 0 obj
<<
/Outlines 191 0 R /PageLabels 281 0 R /PageMode /UseNone /Pages 223 0 R /Type /Catalog
>>
endobj
190 0 obj
<<
/Author () /CreationDate (D:20220211123350+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20220211123350+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Network Programming in ANSI Common Lisp with IOLib) /Trapped /False
>>
endobj
191 0 obj
<<
/Count 38 /First 192 0 R /Last 222 0 R /Type /Outlines
>>
endobj
192 0 obj
<<
/Count 3 /Dest [ 81 0 R /XYZ 62.69291 753.0236 0 ] /First 193 0 R /Last 195 0 R /Next 196 0 R /Parent 191 0 R 
  /Title (\376\377\0001\000\240\000\240\000\240\000I\000n\000t\000r\000o\000d\000u\000c\000t\000i\000o\000n)
>>
endobj
193 0 obj
<<
/Dest [ 81 0 R /XYZ 62.69291 420.0236 0 ] /Next 194 0 R /Parent 192 0 R /Title (\376\377\0001\000.\0001\000\240\000\240\000\240\000A\000c\000k\000n\000o\000w\000l\000e\000d\000g\000e\000m\000e\000n\000t\000s)
>>
endobj
194 0 obj
<<
/Dest [ 81 0 R /XYZ 62.69291 360.0236 0 ] /Next 195 0 R /Parent 192 0 R /Prev 193 0 R /Title (\376\377\0001\000.\0002\000\240\000\240\000\240\000S\000u\000p\000p\000o\000r\000t\000i\000n\000g\000 \000C\000o\000d\000e)
>>
endobj
195 0 obj
<<
/Dest [ 83 0 R /XYZ 62.69291 753.0236 0 ] /Parent 192 0 R /Prev 194 0 R /Title (\376\377\0001\000.\0003\000\240\000\240\000\240\000R\000u\000n\000n\000i\000n\000g\000 \000t\000h\000e\000 \000E\000x\000a\000m\000p\000l\000e\000s)
>>
endobj
196 0 obj
<<
/Count 25 /Dest [ 87 0 R /XYZ 62.69291 753.0236 0 ] /First 197 0 R /Last 219 0 R /Next 222 0 R /Parent 191 0 R 
  /Prev 192 0 R /Title (\376\377\0002\000\240\000\240\000\240\000I\000P\000V\0004\000 \000T\000C\000P\000 \000C\000l\000i\000e\000n\000t\000/\000S\000e\000r\000v\000e\000r\000 \000B\000l\000o\000c\000k\000i\000n\000g\000 \000a\000n\000d\000 \000n\000o\000n\000b\000l\000o\000c\000k\000i\000n\000g\000 \000I\000/\000O)
>>
endobj
197 0 obj
<<
/Dest [ 89 0 R /XYZ 62.69291 753.0236 0 ] /Next 198 0 R /Parent 196 0 R /Title (\376\377\0002\000.\0001\000\240\000\240\000\240\000O\000v\000e\000r\000v\000i\000e\000w\000 \000o\000f\000 \000E\000x\000a\000m\000p\000l\000e\000s)
>>
endobj
198 0 obj
<<
/Count 3 /Dest [ 91 0 R /XYZ 62.69291 753.0236 0 ] /First 199 0 R /Last 201 0 R /Next 202 0 R /Parent 196 0 R 
  /Prev 197 0 R /Title (\376\377\0002\000.\0002\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000C\000l\000i\000e\000n\000t\000s)
>>
endobj
199 0 obj
<<
/Dest [ 91 0 R /XYZ 62.69291 693.0236 0 ] /Next 200 0 R /Parent 198 0 R /Title (\376\377\0002\000.\0002\000.\0001\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000C\000l\000i\000e\000n\000t\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0001\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
200 0 obj
<<
/Dest [ 94 0 R /XYZ 62.69291 324.1229 0 ] /Next 201 0 R /Parent 198 0 R /Prev 199 0 R /Title (\376\377\0002\000.\0002\000.\0002\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000C\000l\000i\000e\000n\000t\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0002\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
201 0 obj
<<
/Dest [ 96 0 R /XYZ 62.69291 384.0108 0 ] /Parent 198 0 R /Prev 200 0 R /Title (\376\377\0002\000.\0002\000.\0003\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000C\000l\000i\000e\000n\000t\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0003\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
202 0 obj
<<
/Count 5 /Dest [ 102 0 R /XYZ 62.69291 753.0236 0 ] /First 203 0 R /Last 207 0 R /Next 208 0 R /Parent 196 0 R 
  /Prev 198 0 R /Title (\376\377\0002\000.\0003\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000S\000e\000r\000v\000e\000r\000s)
>>
endobj
203 0 obj
<<
/Dest [ 102 0 R /XYZ 62.69291 687.0236 0 ] /Next 204 0 R /Parent 202 0 R /Title (\376\377\0002\000.\0003\000.\0001\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000S\000e\000r\000v\000e\000r\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0001\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
204 0 obj
<<
/Dest [ 106 0 R /XYZ 62.69291 627.0236 0 ] /Next 205 0 R /Parent 202 0 R /Prev 203 0 R /Title (\376\377\0002\000.\0003\000.\0002\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000S\000e\000r\000v\000e\000r\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0002\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
205 0 obj
<<
/Dest [ 108 0 R /XYZ 62.69291 753.0236 0 ] /Next 206 0 R /Parent 202 0 R /Prev 204 0 R /Title (\376\377\0002\000.\0003\000.\0003\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000S\000e\000r\000v\000e\000r\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0003\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
206 0 obj
<<
/Dest [ 112 0 R /XYZ 62.69291 655.8236 0 ] /Next 207 0 R /Parent 202 0 R /Prev 205 0 R /Title (\376\377\0002\000.\0003\000.\0004\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000S\000e\000r\000v\000e\000r\000 \000I\000V\000P\0004\000/\000T\000C\000P\000:\000 \000e\000x\0004\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
207 0 obj
<<
/Dest [ 120 0 R /XYZ 62.69291 703.8236 0 ] /Parent 202 0 R /Prev 206 0 R /Title (\376\377\0002\000.\0003\000.\0005\000\240\000\240\000\240\000D\000a\000y\000t\000i\000m\000e\000 \000C\000l\000i\000e\000n\000t\000/\000S\000e\000r\000v\000e\000r\000 \000C\000o\000m\000m\000e\000n\000t\000a\000r\000y)
>>
endobj
208 0 obj
<<
/Dest [ 122 0 R /XYZ 62.69291 753.0236 0 ] /Next 209 0 R /Parent 196 0 R /Prev 202 0 R /Title (\376\377\0002\000.\0004\000\240\000\240\000\240\000E\000c\000h\000o\000 \000L\000i\000n\000e\000 \000C\000l\000i\000e\000n\000t\000s\000 \000a\000n\000d\000 \000S\000e\000r\000v\000e\000r\000s)
>>
endobj
209 0 obj
<<
/Count 3 /Dest [ 124 0 R /XYZ 62.69291 753.0236 0 ] /First 210 0 R /Last 212 0 R /Next 213 0 R /Parent 196 0 R 
  /Prev 208 0 R /Title (\376\377\0002\000.\0005\000\240\000\240\000\240\000E\000c\000h\000o\000 \000C\000l\000i\000e\000n\000t\000s)
>>
endobj
210 0 obj
<<
/Dest [ 124 0 R /XYZ 62.69291 657.0236 0 ] /Next 211 0 R /Parent 209 0 R /Title (\376\377\0002\000.\0005\000.\0001\000\240\000\240\000\240\000E\000c\000h\000o\000 \000C\000l\000i\000e\000n\000t\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0004\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
211 0 obj
<<
/Dest [ 126 0 R /XYZ 62.69291 325.9469 0 ] /Next 212 0 R /Parent 209 0 R /Prev 210 0 R /Title (\376\377\0002\000.\0005\000.\0002\000\240\000\240\000\240\000E\000c\000h\000o\000 \000C\000l\000i\000e\000n\000t\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0005\000a\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
212 0 obj
<<
/Dest [ 138 0 R /XYZ 62.69291 693.0236 0 ] /Parent 209 0 R /Prev 211 0 R /Title (\376\377\0002\000.\0005\000.\0003\000\240\000\240\000\240\000E\000c\000h\000o\000 \000C\000l\000i\000e\000n\000t\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0005\000b\000-\000c\000l\000i\000e\000n\000t\000.\000l\000i\000s\000p)
>>
endobj
213 0 obj
<<
/Count 4 /Dest [ 142 0 R /XYZ 62.69291 753.0236 0 ] /First 214 0 R /Last 217 0 R /Next 218 0 R /Parent 196 0 R 
  /Prev 209 0 R /Title (\376\377\0002\000.\0006\000\240\000\240\000\240\000E\000c\000h\000o\000 \000S\000e\000r\000v\000e\000r\000s)
>>
endobj
214 0 obj
<<
/Dest [ 142 0 R /XYZ 62.69291 681.0236 0 ] /Next 215 0 R /Parent 213 0 R /Title (\376\377\0002\000.\0006\000.\0001\000\240\000\240\000\240\000E\000c\000h\000o\000 \000S\000e\000r\000v\000e\000r\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0005\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
215 0 obj
<<
/Dest [ 148 0 R /XYZ 62.69291 619.8236 0 ] /Next 216 0 R /Parent 213 0 R /Prev 214 0 R /Title (\376\377\0002\000.\0006\000.\0002\000\240\000\240\000\240\000E\000c\000h\000o\000 \000S\000e\000r\000v\000e\000r\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0006\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
216 0 obj
<<
/Dest [ 156 0 R /XYZ 62.69291 449.8236 0 ] /Next 217 0 R /Parent 213 0 R /Prev 215 0 R /Title (\376\377\0002\000.\0006\000.\0003\000\240\000\240\000\240\000E\000c\000h\000o\000 \000S\000e\000r\000v\000e\000r\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0007\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
217 0 obj
<<
/Dest [ 166 0 R /XYZ 62.69291 307.8254 0 ] /Parent 213 0 R /Prev 216 0 R /Title (\376\377\0002\000.\0006\000.\0004\000\240\000\240\000\240\000E\000c\000h\000o\000 \000S\000e\000r\000v\000e\000r\000 \000I\000P\000V\0004\000/\000T\000C\000P\000:\000 \000e\000x\0008\000-\000s\000e\000r\000v\000e\000r\000.\000l\000i\000s\000p)
>>
endobj
218 0 obj
<<
/Dest [ 180 0 R /XYZ 62.69291 753.0236 0 ] /Next 219 0 R /Parent 196 0 R /Prev 213 0 R /Title (\376\377\0002\000.\0007\000\240\000\240\000\240\000F\000u\000t\000u\000r\000e\000 \000D\000i\000r\000e\000c\000t\000i\000o\000n\000s)
>>
endobj
219 0 obj
<<
/Count 2 /Dest [ 182 0 R /XYZ 62.69291 753.0236 0 ] /First 220 0 R /Last 221 0 R /Parent 196 0 R /Prev 218 0 R 
  /Title (\376\377\0002\000.\0008\000\240\000\240\000\240\000A\000p\000p\000e\000n\000d\000i\000x\000 \000A)
>>
endobj
220 0 obj
<<
/Dest [ 182 0 R /XYZ 62.69291 681.0236 0 ] /Next 221 0 R /Parent 219 0 R /Title (\376\377\0002\000.\0008\000.\0001\000\240\000\240\000\240\000T\000h\000e\000 \000C\000l\000i\000e\000n\000t\000s)
>>
endobj
221 0 obj
<<
/Dest [ 182 0 R /XYZ 62.69291 396.0236 0 ] /Parent 219 0 R /Prev 220 0 R /Title (\376\377\0002\000.\0008\000.\0002\000\240\000\240\000\240\000T\000h\000e\000 \000s\000e\000r\000v\000e\000r\000s)
>>
endobj
222 0 obj
<<
/Dest [ 188 0 R /XYZ 62.69291 753.0236 0 ] /Parent 191 0 R /Prev 196 0 R /Title (\376\377\0003\000\240\000\240\000\240\000B\000i\000b\000l\000i\000o\000g\000r\000a\000p\000h\000y)
>>
endobj
223 0 obj
<<
/Count 57 /Kids [ 5 0 R 69 0 R 74 0 R 77 0 R 81 0 R 83 0 R 85 0 R 87 0 R 89 0 R 91 0 R 
  94 0 R 96 0 R 98 0 R 100 0 R 102 0 R 104 0 R 106 0 R 108 0 R 110 0 R 112 0 R 
  114 0 R 116 0 R 118 0 R 120 0 R 122 0 R 124 0 R 126 0 R 128 0 R 130 0 R 132 0 R 
  134 0 R 136 0 R 138 0 R 140 0 R 142 0 R 144 0 R 146 0 R 148 0 R 150 0 R 152 0 R 
  154 0 R 156 0 R 158 0 R 160 0 R 162 0 R 164 0 R 166 0 R 168 0 R 170 0 R 172 0 R 
  174 0 R 176 0 R 178 0 R 180 0 R 182 0 R 184 0 R 188 0 R ] /Type /Pages
>>
endobj
224 0 obj
<<
/Length 842
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 28 Tm /F2 20 Tf 24 TL 19.91488 0 Td (Network Programming in ANSI Common Lisp) Tj T* 166.69 0 Td (with IOLib) Tj T* -186.6049 0 Td ET
Q
Q
q
1 0 0 1 62.69291 695.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 240.9449 0 Td 12 TL /F1 10 Tf 12 TL  T* -240.9449 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
225 0 obj
<<
/Length 8232
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 732.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Table of Contents) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 168.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (1   Introduction) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (5) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1.1   Acknowledgements) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (5) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1.2   Supporting Code) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (5) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1.3   Running the Examples) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (6) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (2   IPV4 TCP Client/Server Blocking and nonblocking I/O) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (8) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.1   Overview of Examples) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.2   Daytime Clients) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.2.1   Daytime Client IVP4/TCP: ex1-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.2.2   Daytime Client IVP4/TCP: ex2-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.2.3   Daytime Client IVP4/TCP: ex3-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3   Daytime Servers) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3.1   Daytime Server IVP4/TCP: ex1-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3.2   Daytime Server IVP4/TCP: ex2-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3.3   Daytime Server IVP4/TCP: ex3-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3.4   Daytime Server IVP4/TCP: ex4-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.3.5   Daytime Client/Server Commentary) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (24) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.4   Echo Line Clients and Servers) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (25) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.5   Echo Clients) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.5.1   Echo Client IPV4/TCP: ex4-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.5.2   Echo Client IPV4/TCP: ex5a-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (27) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.5.3   Echo Client IPV4/TCP: ex5b-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (33) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.6   Echo Servers) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (35) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.6.1   Echo Server IPV4/TCP: ex5-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (35) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.6.2   Echo Server IPV4/TCP: ex6-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (38) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.6.3   Echo Server IPV4/TCP: ex7-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (42) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.6.4   Echo Server IPV4/TCP: ex8-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (47) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.7   Future Directions) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (54) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.8   Appendix A) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (55) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.8.1   The Clients) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (55) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (2.8.2   The servers) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (55) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (3   Bibliography) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 60.88 0 Td (57) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 168.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 240.9449 0 Td 12 TL /F1 10 Tf 12 TL  T* -240.9449 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
226 0 obj
<<
/Length 2905
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 723.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL 211.3249 0 Td (Revisions) Tj T* -211.3249 0 Td ET
Q
Q
q
1 0 0 1 62.69291 663.0236 cm
q
1 1 1 rg
n 0 54 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 469.8898 -18 re f*
1 1 1 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 54 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
.960784 .960784 .862745 rg
n 0 0 76.10433 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 27.49217 0 Td (Date) Tj T* -27.49217 0 Td ET
Q
Q
q
1 0 0 1 94.10433 39 cm
q
.960784 .960784 .862745 rg
n 0 0 46.73622 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 6.41811 0 Td (Version) Tj T* -6.41811 0 Td ET
Q
Q
q
1 0 0 1 152.8406 39 cm
q
.960784 .960784 .862745 rg
n 0 0 46.73622 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 4.19811 0 Td (Revision) Tj T* -4.19811 0 Td ET
Q
Q
q
1 0 0 1 211.5768 39 cm
q
.960784 .960784 .862745 rg
n 0 0 252.313 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 112.8215 0 Td (Name) Tj T* -112.8215 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (04/02/2010) Tj T* ET
Q
Q
q
1 0 0 1 94.10433 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 152.8406 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 211.5768 21 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Peter Keller \() Tj 0 0 .501961 rg (psilord@cs.wisc.edu) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (02/11/2022) Tj T* ET
Q
Q
q
1 0 0 1 94.10433 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 152.8406 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 211.5768 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Angelo Rossi \() Tj 0 0 .501961 rg (angelo.rossi.homelab@gmail.com) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 88.10433 0 m 88.10433 54 l S
n 146.8406 0 m 146.8406 54 l S
n 205.5768 0 m 205.5768 54 l S
n 0 54 m 469.8898 54 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 54 l S
n 469.8898 0 m 469.8898 54 l S
Q
Q
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 240.9449 0 Td 12 TL /F1 10 Tf 12 TL  T* -240.9449 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
227 0 obj
<<
/Length 1901
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is IOLib?) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.463984 Tw (IOLib is a portable I/O library for ANSI Common Lisp. It includes socket interfaces for network) Tj T* 0 Tw .376412 Tw (programming with IPV4/IPV6 TCP and UDP, an I/O multiplexer that includes nonblocking I/O, a DNS) Tj T* 0 Tw (resolver library, and a pathname library.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 686.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where do I get IOLib?) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 635.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The current version of IOLib is found here:) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (<) Tj 0 0 .501961 rg (http://common-lisp.net/project/iolib/download.shtml) Tj 0 0 0 rg (>) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Please use the repository located in the Live Sources section for the most up to date version of IOLib.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 635.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 240.9449 0 Td 12 TL /F1 10 Tf 12 TL  T* -240.9449 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
228 0 obj
<<
/Length 7423
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 732.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (1   Introduction) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
BT 1 0 0 1 0 62 Tm 2.508314 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tutorial loosely follows the exposition of network programming in "UNIX Network Programming,) Tj T* 0 Tw -0.084017 Tw (Networking APIs: Sockets and XTI 2nd Edition" by W. Richard Stevens \() Tj /F1 8 Tf 0 0 .501961 rg 5 Ts (STEVENS1997) Tj /F1 10 Tf 0 0 0 rg 0 Ts (\). Many examples are) Tj T* 0 Tw .95311 Tw (derived from the source codes in that book. Major deviations from the C sources include converting the) Tj T* 0 Tw .703059 Tw (concurrent examples which use fork\(\) into threaded examples which use the portable Bordeaux Threads) Tj T* 0 Tw 1.129213 Tw (package, more structured implementations of certain concepts such as data buffers and error handling,) Tj T* 0 Tw (and general movement of coding style towards a Common Lisp viewpoint.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 636.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The scope of this version of the tutorial is:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 630.0236 cm
Q
q
1 0 0 1 62.69291 540.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Exposition suitable for programmers unfamiliar with ANSI Common Lisp) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (IPV4 TCP) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Client/Server architecture) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Iterative vs Concurrent \(via threading\) vs Multiplexed Server Design) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Blocking and nonblocking I/O) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 540.0236 cm
Q
q
1 0 0 1 62.69291 498.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.479987 Tw (It is intended, however, that this tutorial grows to contain the entirety of IOLib's API as detailed in the) Tj T* 0 Tw .113516 Tw (Future Directions section of this tutorial. As newer revisions of this tutorial are released, those gaps will be) Tj T* 0 Tw (filled until the whole of the IOLib API has been discussed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 432.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.907984 Tw (Finally, the example code in this tutorial is algorithmically cut from the actual example programs and) Tj T* 0 Tw .221235 Tw (inserted into the tutorial via a template generation method. The example codes have embedded in them a) Tj T* 0 Tw 2.086654 Tw (tiny markup language which facilitates this in the form \(on a single line\) of ';; ex-NNNb' to begin an) Tj T* 0 Tw .317984 Tw (example section, and ';; ex-NNNe' to end an example section--NNN stands for an enumeration integer for) Tj T* 0 Tw (which each section's begin and end must match.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 402.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (1.1   Acknowledgements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 372.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.047907 Tw (I would like to greatly thank Stelian Ionescu, the author of IOLib for his exposition of the various features of) Tj T* 0 Tw (IOLib and his patience in our sometimes long conversations.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 342.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (1.2   Supporting Code) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 312.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .571235 Tw (The file package.lisp contains a small library of codes used widely in the examples. The supporting code) Tj T* 0 Tw (implements:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 306.0236 cm
Q
q
1 0 0 1 62.69291 128.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 171.2 cm
Q
q
1 0 0 1 20 171.2 cm
Q
q
1 0 0 1 20 159.2 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The package containing the examples, called :iolib.examples.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 153.2 cm
Q
q
1 0 0 1 20 129.2 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.064682 Tw (The variables *host* and *port*, set to "localhost" and 9999 respectively. This is the default name) Tj T* 0 Tw (and port to which client connect and servers listen. Servers usually bind to 0.0.0.0, however.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 123.2 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 78.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .954597 Tw (A small, but efficient, queue implementation, from "ANSI Common Lisp" by Paul Graham. The) Tj T* 0 Tw (interface calls are:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (\(make-queue\)) Tj T* (\(enqueue obj q\)) Tj T* (\(dequeue q\)) Tj T* (\(empty-queue q\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .002706 Tw (:iolib.examples currently depends upon IOLib alone and uses packages :common-lisp, :iolib, and) Tj T* 0 Tw (:bordeaux-threads.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 128.8236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 207.8699 0 Td 12 TL /F1 10 Tf 0 0 0 rg (1   Introduction) Tj T* -207.8699 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
229 0 obj
<<
/Length 4111
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (1.3   Running the Examples) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .197318 Tw (These examples were developed and tested on SBCL 1.0.33.30 running on an x86 Ubuntu 8.10 machine.) Tj T* 0 Tw (They were ran with two sessions of SBCL running, one acting as a client, and the other as a server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 663.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.578935 Tw (Supposing we'd like to start up the first example of the daytime server and connect to it with the first) Tj T* 0 Tw .383876 Tw (daytime client example. Initially, the server will bind to *host* and *port* and wait for the client to connect.) Tj T* 0 Tw (We connect with the client to *host* and *port*, get the time, and exit.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (First we'll start up a server:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 359.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 276 re B*
Q
q
BT 1 0 0 1 0 254 Tm 12 TL /F4 10 Tf 0 0 0 rg (Linux black ) Tj (>) Tj ( sbcl) Tj T* (This is SBCL 2.1.1.debian, an implementation of ANSI Common Lisp.) Tj T* (More information about SBCL is available at ) Tj (<) Tj (http://www.sbcl.org/) Tj (>) Tj (.) Tj T*  T* (SBCL is free software, provided as is, with absolutely no warranty.) Tj T* (It is mostly in the public domain; some portions are provided under) Tj T* (BSD-style licenses.  See the CREDITS and COPYING files in the) Tj T* (distribution for more information.) Tj T* (* \(require :iolib.examples\) ; much output!) Tj T* (* \(in-package :iolib.examples\)) Tj T*  T* (#) Tj T* (* \(run-ex1-server\)) Tj T* (Created socket: #[fd=5]) Tj T* (Bound socket: #) Tj T* (Listening on socket bound to: 0.0.0.0:9999) Tj T* (Waiting to accept a connection...) Tj T* ([ server is waiting for the below client to connect! ]) Tj T* (Got a connection from 127.0.0.1:34794!) Tj T* (Sending the time...Sent!) Tj T* (T) Tj T* (*) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 339.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now we'll start up the client which connected to the above server:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 119.7287 cm
q
q
.976496 0 0 .976496 0 0 cm
q
1 0 0 1 6.6 6.758862 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 216 re B*
Q
q
BT 1 0 0 1 0 194 Tm 12 TL /F4 10 Tf 0 0 0 rg (Linux black ) Tj (>) Tj ( sbcl) Tj T* (This is SBCL 2.1.1.debian, an implementation of ANSI Common Lisp.) Tj T* (More information about SBCL is available at ) Tj (<) Tj (http://www.sbcl.org/) Tj (>) Tj (.) Tj T*  T* (SBCL is free software, provided as is, with absolutely no warranty.) Tj T* (It is mostly in the public domain; some portions are provided under) Tj T* (BSD-style licenses.  See the CREDITS and COPYING files in the) Tj T* (distribution for more information.) Tj T* (* \(require :iolib.examples\) ; much output!) Tj T* (* \(in-package :iolib.examples\)) Tj T*  T* (#) Tj T* (* \(run-ex1-client\)) Tj T* (Connected to server 127.0.0.1:9999 via my local connection at 127.0.0.1:34794!) Tj T* (2/27/2010 13:51:48) Tj T* (T) Tj T* (*) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 99.72874 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In each client example, one can specify which host or port to which it should connect:) Tj T* ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 179.5249 0 Td 12 TL /F1 10 Tf 0 0 0 rg (1.3   Running the Examples) Tj T* -179.5249 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
230 0 obj
<<
/Length 1427
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 681.5441 cm
q
q
.976496 0 0 .976496 0 0 cm
q
1 0 0 1 6.6 6.758862 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (* \(run-ex1-client :host "localhost" :port 9999\)) Tj T* (Connected to server 127.0.0.1:9999 via my local connection at 127.0.0.1:34798!) Tj T* (2/27/2010 13:53:7) Tj T* (T) Tj T* (*) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 649.5441 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .507209 Tw (The servers can be told a port they should listen upon and in this tutorial, unless otherwise specified, will) Tj T* 0 Tw (always bind to 0.0.0.0:9999 which means across all interfaces on the machine and on port 9999.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 649.5441 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 179.5249 0 Td 12 TL /F1 10 Tf 0 0 0 rg (1.3   Running the Examples) Tj T* -179.5249 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
231 0 obj
<<
/Length 864
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 732.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (2   IPV4 TCP Client/Server Blocking and nonblocking I/O) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 726.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 115.3349 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2   IPV4 TCP Client/Server Blocking and nonblocking I/O) Tj T* -115.3349 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
232 0 obj
<<
/Length 2855
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.1   Overview of Examples) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.016328 Tw (The examples consist of a collection of clients and servers. They are split into two groups: a set of daytime) Tj T* 0 Tw 1.334985 Tw (clients and server, and echo clients and servers. In some of the examples, a certain network protocol,) Tj T* 0 Tw (suppose end-of-file handling, must be matched between client and server causing further delineation.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Client protocols are matched to server protocols thusly:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.143976 Tw (Clients: ex1-client, ex2-client, ex3-client, can work with servers: ex1-server, ex2-server, ex3-server,) Tj T* 0 Tw (ex4-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Clients: ex4-client, ex5a-client, can work with servers: ex5-server, ex6-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 609.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Clients: ex5b-client, can work with servers: ex7-server, ex8-server) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 579.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .067126 Tw (Some clients and servers use the "daytime" series of protocols, those are ex1-client, ex2-client, ex3-client,) Tj T* 0 Tw (and ex1-server, ex2-server, ex3-server, and ex4-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 549.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.025318 Tw (Some clients and servers use the "echo a line" series of protocols, those are ex4-client, ex5a-client,) Tj T* 0 Tw (ex5b-client, and ex5-server, ex6-server, ex7-server, and ex8-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 519.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .667045 Tw (Even though much of the example source is included in the tutorial, it is recommended that the example) Tj T* 0 Tw (sources be carefully read and understood in order to gain the most benefit from the tutorial.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 519.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 180.0899 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.1   Overview of Examples) Tj T* -180.0899 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
233 0 obj
<<
/Length 7672
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .14237 Tw (In this section we show the evolution of a client which connects to a server and gets the time of day. Each) Tj T* 0 Tw (example shows some kind of an incremental improvement to the previous one.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.2.1   Daytime Client IVP4/TCP: ex1-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.094692 Tw (This example is a very simple daytime client program which contacts a server, by default at *host* and) Tj T* 0 Tw .106077 Tw (*port*, returns a single line of text that is the current date and time, and then exits. It is written in more of a) Tj T* 0 Tw .354987 Tw (C style just to make it easy to compare with similar simple examples in other languages. It uses blocking,) Tj T* 0 Tw (line oriented I/O.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The steps this program performs are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 600.0236 cm
Q
q
1 0 0 1 62.69291 600.0236 cm
Q
q
1 0 0 1 62.69291 554.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The ex1-client.lisp entrance call:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun run-ex1-client \() Tj (&) Tj (key \(host *host*\) \(port *port*\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 548.8236 cm
Q
q
1 0 0 1 62.69291 341.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 192.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 192.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create an active TCP socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 162.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.225318 Tw (The socket creation function \(MAKE-SOCKET ...\) is the method by which one creates a socket in) Tj T* 0 Tw (IOLib. It is very versatile and can be used to both create and initialize the socket in a single call.) Tj T* ET
Q
Q
q
1 0 0 1 23 132.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.082209 Tw (In this case, we use it simply and create an active IPV4 Internet stream socket which can read or) Tj T* 0 Tw (write utf8 text and that understands a particular newline convention in the underlying data.) Tj T* ET
Q
Q
q
1 0 0 1 23 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .662485 Tw (One small, but important, deviation of IOLib sockets from Berkeley sockets is that when a socket is) Tj T* 0 Tw 1.631318 Tw (created, it is predestined to forever and unalterably be either an active or passive socket. Active) Tj T* 0 Tw (sockets are used to connect to a server and passive sockets are used for a server's listening socket.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (;; Create a internet TCP socket under IPV4) Tj T* (\(let \(\(socket \(make-socket :connect :active) Tj T* (                           :address-family :internet) Tj T* (                           :type :stream) Tj T* (                           :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (                           :ipv6 nil\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 335.6236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 225.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 225.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specify the Server's IP address and port and establish a connection with the server:) Tj T* ET
Q
Q
q
1 0 0 1 23 207.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This bit of code contains many calls into IOLib and we shall examine each of them.) Tj T* ET
Q
Q
q
1 0 0 1 23 177.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.225984 Tw (The function LOOKUP-HOSTNAME takes as a string the DNS name for a machine and returns 4) Tj T* 0 Tw (values:) Tj T* ET
Q
Q
q
1 0 0 1 23 171.7575 cm
Q
q
1 0 0 1 23 171.7575 cm
Q
q
1 0 0 1 23 159.7575 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 4.55 0 Td (A.) Tj T* -4.55 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an address) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 153.7575 cm
Q
q
1 0 0 1 23 141.7575 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 4.55 0 Td (B.) Tj T* -4.55 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a list of additional addresses\(if existent\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 135.7575 cm
Q
q
1 0 0 1 23 123.7575 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 4 0 Td (C.) Tj T* -4 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the canonical name of the host) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 117.7575 cm
Q
q
1 0 0 1 23 105.7575 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 4 0 Td (D.) Tj T* -4 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an alist of all the host's names with their respective addresses) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 105.7575 cm
Q
q
1 0 0 1 23 87.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We use only the first return value, the address component, to pass to the function CONNECT.) Tj T* ET
Q
Q
q
1 0 0 1 23 21.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.635868 Tw (The function CONNECT will connect the socket to the address, but to a random port if the :port) Tj T* 0 Tw 1.356235 Tw (keyword argument is not specified. The average client codes usually use :wait t to block until the) Tj T* 0 Tw .878409 Tw (connect can resolve with a connected fd or an error. The exception to always using :wait t is if the) Tj T* 0 Tw -0.051916 Tw (client needs to connect to many servers at once, suppose a web client, or if a server is also a client in) Tj T* 0 Tw (other contexts and wishes not to block.) Tj T* ET
Q
Q
q
1 0 0 1 23 -20.24252 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.415366 Tw (The functions REMOTE-HOST and REMOTE-PORT return the ip address and port of the remote) Tj T* 0 Tw 2.892976 Tw (connection associated with the connected socket. LOCAL-HOST and LOCAL-PORT return the) Tj T* 0 Tw 2.99248 Tw (information of the client's end of the connected socket. Analogous calls REMOTE-NAME and) Tj T* 0 Tw ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 194.8199 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* -194.8199 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
234 0 obj
<<
/Length 6028
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 648.5229 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 91.50073 Tm  T* ET
q
1 0 0 1 23 77.50073 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .001235 Tw (LOCAL-NAME each return two values where the first value is the equivalent of *-host and the second) Tj T* 0 Tw (value is the equivalent of *-port.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (;; do a blocking connect to the daytime server on the port.) Tj T* (\(connect socket \(lookup-hostname host\) :port port :wait t\)) Tj T* (\(format t "Connected to server ~A:~A via my local connection at ~A:~A!~%") Tj T* (        \(remote-host socket\) \(remote-port socket\)) Tj T* (        \(local-host socket\) \(local-port socket\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 642.5229 cm
Q
q
1 0 0 1 62.69291 507.3229 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Read and display the server's reply:) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
BT 1 0 0 1 0 38 Tm .166488 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now that the socket has been connected to the server, the server will send a line of text to the client.) Tj T* 0 Tw 1.471412 Tw (The client uses the standard Common Lisp function READ-LINE to read the information from the) Tj T* 0 Tw .59311 Tw (socket. The function READ-LINE blocks and will only return when an ) Tj /F5 10 Tf (entire line) Tj /F1 10 Tf ( is read. Once read,) Tj T* 0 Tw (the line is emitted to *standard-output* via the function call FORMAT.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;; read the one line of information I need from the daytime) Tj T* (;; server.  I can use read-line here because this is a TCP socket.) Tj T* (\(let \(\(line \(read-line socket\)\)\)) Tj T* (  \(format t "~A" line\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 501.3229 cm
Q
q
1 0 0 1 62.69291 402.1229 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 84.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 84.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (End program:) Tj T* ET
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.209986 Tw (We close the socket with the standard function CLOSE and return true so the return value of this) Tj T* 0 Tw (example is t.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (;; all done) Tj T* (\(close socket\)) Tj T* (t\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 402.1229 cm
Q
q
1 0 0 1 62.69291 336.1229 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.025777 Tw (While this program works, it has some major flaws in it. First and foremost is that it doesn't handle any) Tj T* 0 Tw 2.387318 Tw (conditions that IOLib signals in common use cases. An example would be to run the ex1-client.lisp) Tj T* 0 Tw .97311 Tw (example without a daytime server running. In most, if not all, Common Lisp toplevels, you'll be dropped) Tj T* 0 Tw 1.081085 Tw (into the debugger on an unhandled SOCKET-CONNECTION-REFUSED-ERROR condition. Secondly, it) Tj T* 0 Tw (isn't written in the Common Lisp style.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 309.1229 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.2.2   Daytime Client IVP4/TCP: ex2-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 267.1229 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.86436 Tw (In this example, we simply tackle the fact ex1-server.lisp can be shortened with an IOLib form to) Tj T* 0 Tw 1.194985 Tw (something where the application writer has less to do concerning cleaning up the socket object. It also) Tj T* 0 Tw (uses line oriented blocking I/O.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 237.1229 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.08816 Tw (The introduced macro WITH-OPEN-SOCKET calls MAKE-SOCKET with the arguments in question and) Tj T* 0 Tw (binds the socket to the variable 'socket'. When this form returns, it will automatically close the socket.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 219.1229 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This shortens the program so much, that the example can be included in its entirety:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 101.9229 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun run-ex2-client \() Tj (&) Tj (key \(host *host*\) \(port *port*\)\)) Tj T*  T* (  ;; We introduce with-open-socket here as a means to easily wrap) Tj T* (  ;; usually synchronous and blocking communication with a form that) Tj T* (  ;; ensures the socket is closed no matter how we exit it.) Tj T* (  \(with-open-socket \(socket :connect :active) Tj T* (                            :address-family :internet) Tj T* (                            :type :stream) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 194.8199 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* -194.8199 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
235 0 obj
<<
/Length 5911
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 529.2108 cm
q
q
.976496 0 0 .976496 0 0 cm
q
1 0 0 1 6.6 6.758862 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 228 re B*
Q
q
BT 1 0 0 1 0 206 Tm 12 TL /F4 10 Tf 0 0 0 rg (                            :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (                            :ipv6 nil\)) Tj T*  T* (    ;; Do a blocking connect to the daytime server on the port.  We) Tj T* (    ;; also introduce lookup-hostname, which converts a hostname to an) Tj T* (    ;; 4 values, but in our case we only want the first, which is an) Tj T* (    ;; address.) Tj T* (    \(connect socket \(lookup-hostname host\) :port port :wait t\)) Tj T* (    \(format t "Connected to server ~A:~A from my local connection at ~A:~A!~%") Tj T* (            \(remote-name socket\) \(remote-port socket\)) Tj T* (            \(local-name socket\) \(local-port socket\)\)) Tj T*  T* (    ;; read the one line of information I need from the daytime) Tj T* (    ;; server.  I can use read-line here because this is a TCP) Tj T* (    ;; socket. It will block until the whole line is read.) Tj T* (    \(let \(\(line \(read-line socket\)\)\)) Tj T* (      \(format t "~A" line\)) Tj T* (      t\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 509.2108 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This shorthand can go even further, if we add this to the WITH-OPEN-SOCKET flags) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 464.0108 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (:remote-host \(lookup-hostname host\)) Tj T* (:remote-port port) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 396.0108 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.02881 Tw (then the underlying MAKE-SOCKET call will in fact connect the socket directly to the server before it is) Tj T* 0 Tw .352765 Tw (available for the body of the macro allowing us to remove the connect call entirely! In the early examples,) Tj T* 0 Tw 1.163735 Tw (however, we don't utilize IOLib's shorthand notations to this degree in order to make apparent how the) Tj T* 0 Tw .720651 Tw (library maps into traditional socket concepts. After one gains familiarity with the IOLib API, the situations) Tj T* 0 Tw (where application of the shortcuts are useful become much easier to see.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 369.0108 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.2.3   Daytime Client IVP4/TCP: ex3-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 267.0108 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .88311 Tw (Now we come to condition handling, which can moderately affect the layout of your IOLib program. Any) Tj T* 0 Tw 1.58784 Tw (real program using IOLib must handle IOLib's signaled conditions which are common to the boundary) Tj T* 0 Tw 2.222651 Tw (cases of network programming. We've already seen one of these boundary cases when we tried to) Tj T* 0 Tw 2.70811 Tw (connect a daytime client to a server that wasn't running. The condition signaled in that case was:) Tj T* 0 Tw 1.310976 Tw (SOCKET-CONNECTION-REFUSED-ERROR. The stream interface has a set of conditions which IOLib) Tj T* 0 Tw .31436 Tw (will signal, and another lower level IOLib layer--which we'll come to in the nonblocking I/O examples have) Tj T* 0 Tw -0.05119 Tw (another set of conditions. There is some intersection between them and we will explore that later. For now,) Tj T* 0 Tw (we'll just use the conditions associated with a stream.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 237.0108 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.687674 Tw (Our rewrite of ex2-client.lisp into ex3-client.lisp \(continuing to use line oriented blocking I/O\) proceeds) Tj T* 0 Tw (thusly:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 231.0108 cm
Q
q
1 0 0 1 62.69291 231.0108 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 121.1447 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 121.1447 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We create a helper function which connects to the server and reads the daytime line:) Tj T* ET
Q
Q
q
1 0 0 1 23 19.14465 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .409318 Tw (Notice the HANDLER-CASE macro around the portion of the function which reads the date from the) Tj T* 0 Tw .696235 Tw (server. In looking at the boundary conditions from the server given this protocol, we can receive an) Tj T* 0 Tw .319269 Tw (END-OF-FILE condition if the client connected, but before the server could respond it exited, closing) Tj T* 0 Tw .358651 Tw (the connection. Since in this case we're inside of a WITH-OPEN-SOCKET form, we simply note that) Tj T* 0 Tw .16284 Tw (we got an END-OF-FILE and let the cleanup forms of WITH-OPEN-SOCKET close the connection. If) Tj T* 0 Tw .312209 Tw (we don't catch this condition, then the program will break into the debugger and that isn't useful. It is) Tj T* 0 Tw 1.632485 Tw (usually debatable as to where one should handle conditions: either near to or far away from the) Tj T* 0 Tw .071235 Tw (generating calls. In these simple examples, no choice has any significant pros or cons. As your IOLib) Tj T* 0 Tw ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 194.8199 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* -194.8199 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
236 0 obj
<<
/Length 4856
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 396.7221 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 343.3015 Tm  T* ET
q
1 0 0 1 23 329.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .688443 Tw (programs become more and more complex, however, it becomes more obvious at what abstraction) Tj T* 0 Tw (level to handle signaled conditions.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 348 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 326 Tm /F4 10 Tf 12 TL (\(defun run-ex3-client-helper \(host port\)) Tj T*  T* (  ;; Create a internet TCP socket under IPV4) Tj T* (  \(with-open-socket) Tj T* (    \(socket :connect :active) Tj T* (            :address-family :internet) Tj T* (            :type :stream) Tj T* (            :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (            :ipv6 nil\)) Tj T*  T* (    ;; do a blocking connect to the daytime server on the port.) Tj T* (    \(connect socket \(lookup-hostname host\) :port port :wait t\)) Tj T* (    \(format t "Connected to server ~A:~A from my local connection at ~A:~A!~%") Tj T* (            \(remote-name socket\) \(remote-port socket\)) Tj T* (            \(local-name socket\) \(local-port socket\)\)) Tj T*  T* (    \(handler-case) Tj T* (        ;; read the one line of information I need from the daytime) Tj T* (        ;; server.  I can use read-line here because this is a TCP) Tj T* (        ;; socket. It will block until the whole line is read.) Tj T* (        \(let \(\(line \(read-line socket\)\)\)) Tj T* (          \(format t "~A" line\)) Tj T* (          t\)) Tj T*  T* (      ;; However, let's notice the signaled condition if the server) Tj T* (      ;; went away prematurely...) Tj T* (      \(end-of-file \(\)) Tj T* (        \(format t "Got end-of-file. Server closed connection!"\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 390.7221 cm
Q
q
1 0 0 1 62.69291 208.0292 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 167.6929 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 155.6929 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.037318 Tw (Some conditions which are complete show-stoppers to the functioning of the code are caught at a) Tj T* 0 Tw (higher level:) Tj T* ET
Q
Q
q
1 0 0 1 23 125.6929 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.001085 Tw (Notice we catch the possible SOCKET-CONNECTION-REFUSED-ERROR from the connect inside) Tj T* 0 Tw (of the function run-ex3-client-helper.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.906103 0 0 .906103 0 0 cm
q
1 0 0 1 6.6 7.283944 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; The main entry point into ex3-client) Tj T* (\(defun run-ex3-client \() Tj (&) Tj (key \(host *host*\) \(port *port*\)\)) Tj T* (  \(handler-case) Tj T*  T* (      \(run-ex3-client-helper host port\)) Tj T*  T* (    ;; handle a commonly signaled error...) Tj T* (    \(socket-connection-refused-error \(\)) Tj T* (      \(format t "Connection refused to ~A:~A. Maybe the server isn't running?~%") Tj T* (              \(lookup-hostname host\) port\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 208.0292 cm
Q
q
1 0 0 1 62.69291 166.0292 cm
q
BT 1 0 0 1 0 26 Tm 2.797318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Here are some common conditions in IOLib \(some from ANSI Common Lisp too\) and under what) Tj T* 0 Tw 1.458651 Tw (situations they are signaled. In any IOLib program, ) Tj /F5 10 Tf (at least) Tj /F1 10 Tf ( these conditions should be handled where) Tj T* 0 Tw (appropriate.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 150.0292 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (END-OF-FILE:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 123.0292 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .920751 Tw (When a stream function such as READ, READ-LINE, etc...\(but not RECEIVE-FROM\), reads from a) Tj T* 0 Tw (socket where the other end has been closed.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 107.0292 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (HANGUP:) Tj T* ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 194.8199 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* -194.8199 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
237 0 obj
<<
/Length 1916
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 726.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.120015 Tw (When writing to a socket with a stream function such as WRITE, FORMAT, etc...\(but not SEND-TO\), if) Tj T* 0 Tw (the socket is closed then this condition is signaled.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 710.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SOCKET-CONNECTION-RESET-ERROR:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 683.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.327356 Tw (When doing I/O on a socket and the other side of the socket sent a RST packet, this condition is) Tj T* 0 Tw (signaled. It can also happen with the IOLIb function ACCEPT and similar.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 667.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SOCKET-CONNECTION-REFUSED-ERROR:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 652.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Signaled by connect if there is no server waiting to accept the incoming connection.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 652.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 194.8199 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.2   Daytime Clients) Tj T* -194.8199 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
238 0 obj
<<
/Length 6356
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now that we have completed the evolution of the daytime client, let's look at the daytime servers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The exposition of the servers follows in style of the clients.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 672.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.3.1   Daytime Server IVP4/TCP: ex1-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .909987 Tw (This first example is an iterative server which handles a single client and then exits. The I/O is blocking) Tj T* 0 Tw (and no error handling is performed. This is similar in scope to the ex1-client.lisp example.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 442.0961 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 178.9276 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 178.9276 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create the server socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 136.9276 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.297765 Tw (We see that the socket is :passive. Every socket in IOLib is predestined to be either an active or) Tj T* 0 Tw .529988 Tw (passive socket and since this is a server socket, it is passive. Also here we see that we can ask for) Tj T* 0 Tw (the underlying fd of the socket with the function SOCKET-OS-FD.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun run-ex1-server \() Tj (&) Tj (key \(port *port*\)\)) Tj T* (  ;; Create a passive \(server\) TCP socket under IPV4 Sockets meant to) Tj T* (  ;; be listened upon *must* be created passively. This is a minor) Tj T* (  ;; deviation from the Berkeley socket interface.) Tj T* (  \(let \(\(socket \(make-socket :connect :passive) Tj T* (                             :address-family :internet) Tj T* (                             :type :stream) Tj T* (                             :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (                             :ipv6 nil\)\)\)) Tj T* (    \(format t "Created socket: ~A[fd=~A]~%" socket \(socket-os-fd socket\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 436.0961 cm
Q
q
1 0 0 1 62.69291 264.8961 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 156.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 156.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Bind the socket) Tj T* ET
Q
Q
q
1 0 0 1 23 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.08436 Tw (Binding a socket is what gives it an endpoint to which clients can connect. The IOLib constant) Tj T* 0 Tw .473059 Tw (+IPV4-UNSPECIFIED+ represents 0.0.0.0 and means if a connection arrives on any interface, it will) Tj T* 0 Tw .445318 Tw (be accepted if it comes to the :port specified. The :reuse-addr keyword represents the socket option) Tj T* 0 Tw -0.06689 Tw (SO_REUSEADDR and states \(among other things\) that if the socket is in the TIME_WAIT state it can) Tj T* 0 Tw (be reused immediately. It is recommended that all servers use :reuse-addr on their listening socket.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (;; Bind the socket to all interfaces with specified port.) Tj T* (\(bind-address socket) Tj T* (              +ipv4-unspecified+ ; which means INADDR_ANY or 0.0.0.0) Tj T* (              :port port) Tj T* (              :reuse-addr t\)) Tj T* (\(format t "Bound socket: ~A~%" socket\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 258.8961 cm
Q
q
1 0 0 1 62.69291 147.6961 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 96.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 96.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Listen on the socket) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.021984 Tw (Listening on a socket allows clients to connect. In this example, we've specified that 5 pending) Tj T* 0 Tw (connection can be queued up in the kernel before being accepted by the process.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;; Convert the sockxet to a listening socket) Tj T* (\(listen-on socket :backlog 5\)) Tj T* (\(format t "Listening on socket bound to: ~A:~A~%") Tj T* (        \(local-host socket\) \(local-port socket\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 141.6961 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 31.82992 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 31.82992 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Accept the client connection.) Tj T* ET
Q
Q
q
1 0 0 1 23 1.829917 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .04061 Tw (Here we finally call the IOLib function ACCEPT-CONNECTION. We would like it to block, so we pass) Tj T* 0 Tw 3.129213 Tw (it :wait t. When ACCEPT-CONNECTION returns it will return a new socket which represents) Tj T* 0 Tw ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
239 0 obj
<<
/Length 6091
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 587.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 152.2 Tm  T* ET
q
1 0 0 1 23 114.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .773828 Tw (the connection to the client. ACCEPT-CONNECTION can return nil under some situations, such as) Tj T* 0 Tw 1.054198 Tw (on a slow server when the client sent a TCP RST packet in between the time the kernel sees the) Tj T* 0 Tw .816136 Tw (connection attempt and ACCEPT-CONNECTION is actually called. We also opt to use the function) Tj T* 0 Tw (REMOTE-NAME, which returns two values, the ip address and port of the remote side of the socket.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (;; Block on accepting a connection) Tj T* (\(format t "Waiting to accept a connection...~%"\)) Tj T* (\(let \(\(client \(accept-connection socket :wait t\)\)\)) Tj T* (  \(when client) Tj T* (    ;; When we get a new connection, show who it is from.) Tj T* (    \(multiple-value-bind \(who rport\)) Tj T* (        \(remote-name client\)) Tj T* (      \(format t "Got a connection from ~A:~A!~%" who rport\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 581.8236 cm
Q
q
1 0 0 1 62.69291 386.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 180.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 180.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Write the time to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.027633 Tw (Here we've figured out the time string and wrote it to the client. Notice we call the function) Tj T* 0 Tw 2.188555 Tw (FINISH-OUTPUT. This ensures that all output is written to the client socket. For streams using) Tj T* 0 Tw 1.144431 Tw (blocking I/O, it is recommended that every write to a blocking socket be followed up with a call to) Tj T* 0 Tw (FINISH-OUTPUT.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (;; Since we're using a internet TCP stream, we can use format) Tj T* (;; with it. However, we should be sure to call finish-output on) Tj T* (;; the socket in order that all the data is sent. Also, this is) Tj T* (;; a blocking write.) Tj T* (\(multiple-value-bind \(s m h d mon y\)) Tj T* (    \(get-decoded-time\)) Tj T* (  \(format t "Sending the time..."\)) Tj T* (  \(format client "~A/~A/~A ~A:~A:~A~%" mon d y h m s\)) Tj T* (  \(finish-output client\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 380.6236 cm
Q
q
1 0 0 1 62.69291 293.4236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 72.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 72.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Close the connection to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 57.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We're done writing to the client, so close the connection so the client knows it got everything.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (;; We're done talking to the client.) Tj T* (\(close client\)) Tj T* (\(format t "Sent!~%"\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 287.4236 cm
Q
q
1 0 0 1 62.69291 176.2236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 96.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 96.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Close the server's socket.) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .112488 Tw (Since this is a one shot server, we close the listening socket and exit. In this and all other servers we) Tj T* 0 Tw (call FINISH-OUTPUT to flush all pending message to *standard-output*, if any.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;; We're done with the server socket too.) Tj T* (\(close socket\)) Tj T* (\(finish-output\)) Tj T* (t\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 176.2236 cm
Q
q
1 0 0 1 62.69291 134.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .137765 Tw (The above code is the basic idea for how a very simple TCP blocking I/O server functions. Like ex1-client,) Tj T* 0 Tw .746235 Tw (this server suffers from the inability to handle common signaled conditions such as a HANGUP from the) Tj T* 0 Tw (client--which means the client went away before the server could write the time to it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 104.2236 cm
q
BT 1 0 0 1 0 14 Tm .816098 Tw 12 TL /F1 10 Tf 0 0 0 rg (However, one major, and subtle, problem of this particular example is that the socket to the client is ) Tj /F5 10 Tf (not) Tj T* 0 Tw .176457 Tw (immediately closed) Tj /F1 10 Tf ( if the server happens to exit, say by going through the debugger back to toplevel--or a) Tj T* 0 Tw ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
240 0 obj
<<
/Length 5287
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 681.0236 cm
q
BT 1 0 0 1 0 62 Tm .712619 Tw 12 TL /F1 10 Tf 0 0 0 rg (signaled condition, before writing the date to the client. If this happens, it can take a VERY long time for) Tj T* 0 Tw .103876 Tw (the socket to be garbage collected and closed. In this scenario, the client will hang around waiting for data) Tj T* 0 Tw .439986 Tw (which will never come until the Lisp implementation closes the socket when it gets around to collecting it.) Tj T* 0 Tw 2.361412 Tw (Garbage collection is an extremely nice feature of Common Lisp, but non-memory OS resources in) Tj T* 0 Tw 2.793318 Tw (general should be eagerly cleaned up. Clients can suffer from this problem too, leaving open, but) Tj T* 0 Tw (unmanipulable, sockets to servers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .259985 Tw (All clients or servers written against IOLib should either use some IOLib specific macros to handle closing) Tj T* 0 Tw 1.152126 Tw (of socket, Common Lisp's condition system like handler-case to catch the signaled conditions, or some) Tj T* 0 Tw (other manual solution.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 612.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.3.2   Daytime Server IVP4/TCP: ex2-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .895697 Tw (Similarly to ex2-client, this server uses the macro WITH-OPEN-SOCKET to open the server socket. We) Tj T* 0 Tw 1.09229 Tw (introduce WITH-ACCEPT-CONNECTION to accept the client and convert this server from a single shot) Tj T* 0 Tw (server to an iterative server which can handle, in a serial fashion only, multiple clients.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
Q
q
1 0 0 1 62.69291 564.0236 cm
Q
q
1 0 0 1 62.69291 200.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 348.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 348.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Serially accept and process clients:) Tj T* ET
Q
Q
q
1 0 0 1 23 294.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .259984 Tw (This portion of ex2-server shows the infinite loop around the accepting of the connection. The macro) Tj T* 0 Tw .766342 Tw (WITH-ACCEPT-CONNECTION takes the server socket and introduces a new binding: client, which) Tj T* 0 Tw 1.457045 Tw (is the accepted connection. We ensure to tell the accept we'd like to be blocking. If for whatever) Tj T* 0 Tw (reason we exit the body, it'll clean up the client socket automatically.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 288 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 266 Tm /F4 10 Tf 12 TL (;; Keep accepting connections forever.) Tj T* (\(loop) Tj T* (    \(format t "Waiting to accept a connection...~%"\)) Tj T*  T* (    ;; Using with-accept-connection, when this form returns it will) Tj T* (    ;; automatically close the client connection.) Tj T* (    \(with-accept-connection \(client server :wait t\)) Tj T* (      ;; When we get a new connection, show who it is from.) Tj T* (      \(multiple-value-bind \(who rport\)) Tj T* (          \(remote-name client\)) Tj T* (        \(format t "Got a connnection from ~A:~A!~%" who rport\)\)) Tj T*  T* (        ;; Since we're using a internet TCP stream, we can use format) Tj T* (        ;; with it. However, we should be sure to finish-output in) Tj T* (        ;; order that all the data is sent.) Tj T* (        \(multiple-value-bind \(s m h d mon y\)) Tj T* (            \(get-decoded-time\)) Tj T* (          \(format t "Sending the time..."\)) Tj T* (          \(format client "~A/~A/~A ~A:~A:~A~%" mon d y h m s\)) Tj T* (          \(finish-output client\)) Tj T* (          \(format t "Sent!~%"\)) Tj T* (          \(finish-output\)) Tj T* (          t\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 200.8236 cm
Q
q
1 0 0 1 62.69291 134.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .668651 Tw (For very simple blocking I/O servers like this one, serially accepting and handling client connections isn't) Tj T* 0 Tw .29912 Tw (so much of a problem, but if the server does anything which takes a lot of time or has to send lots of data) Tj T* 0 Tw 1.123672 Tw (back and forth to many persistent clients, then this is a poor design. The means by which you exit this) Tj T* 0 Tw 1.905984 Tw (server is by breaking evaluation and returning to the toplevel. When this happens, the WITH-* forms) Tj T* 0 Tw (automatically close the connection to the client.) Tj T* ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
241 0 obj
<<
/Length 5567
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 738.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.3.3   Daytime Server IVP4/TCP: ex3-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 696.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .666457 Tw (In this iterative and blocking I/O server example, we add the handling of the usual signaled conditions in) Tj T* 0 Tw 4.549982 Tw (network boundary cases often found with sockets. Like the earlier client where we introduced) Tj T* 0 Tw (HANDLER-CASE, this involves a little bit of restructuring of the codes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
Q
q
1 0 0 1 62.69291 690.0236 cm
Q
q
1 0 0 1 62.69291 389.1278 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 285.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 285.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A helper function which opens a passive socket, binds it, and listens on it:) Tj T* ET
Q
Q
q
1 0 0 1 23 243.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .47528 Tw (There is nothing new in this portion of the code. We've seen this pattern before. In production code,) Tj T* 0 Tw 3.75498 Tw (we could probably shorten this further by having WITH-OPEN-SOCKET do the binding and) Tj T* 0 Tw (connecting with appropriate keyword arguments.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F4 10 Tf 12 TL (\(defun run-ex3-server-helper \(port\)) Tj T* (  \(with-open-socket) Tj T* (    \(server :connect :passive) Tj T* (            :address-family :internet) Tj T* (            :type :stream) Tj T* (            :ipv6 nil) Tj T* (            :external-format '\(:utf-8 :eol-style :crlf\)\)) Tj T*  T* (    \(format t "Created socket: ~A[fd=~A]~%" server \(socket-os-fd server\)\)) Tj T*  T* (    ;; Bind the socket to all interfaces with specified port.) Tj T* (    \(bind-address server +ipv4-unspecified+ :port port :reuse-addr t\)) Tj T* (    \(format t "Bound socket: ~A~%" server\)) Tj T*  T* (    ;; start listening on the server socket) Tj T* (    \(listen-on server :backlog 5\)) Tj T* (    \(format t "Listening on socket bound to: ~A:~A~%") Tj T* (            \(local-host server\)) Tj T* (            \(local-port server\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 383.1278 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 273.2616 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 273.2616 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Repeatedly handle clients in a serial fashion:) Tj T* ET
Q
Q
q
1 0 0 1 23 195.2616 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 3.059983 Tw (The new material in this function is the HANDLER-CASE around sending the client the time) Tj T* 0 Tw .076651 Tw (information. The boundary conditions when writing to a client include the server getting a reset \(RST\)) Tj T* 0 Tw .649431 Tw (from the client or discovering the client had gone away and there is no-one to which to write. Since) Tj T* 0 Tw 2.230814 Tw (the write is contained within the WITH-ACCEPT-CONNECTION form, if any of these conditions) Tj T* 0 Tw .028409 Tw (happen, we simply notice that they happened and let the form clean up the socket when it exits. If we) Tj T* 0 Tw (didn't catch the conditions, however, we'd break into the debugger.) Tj T* ET
Q
Q
q
1 0 0 1 23 105.2616 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL .882209 Tw (One might ask what the value of catching these conditions here is at all since we don't actually do) Tj T* 0 Tw 1.072126 Tw (anything with them--other than printing a message and preventing the code from breaking into the) Tj T* 0 Tw .69311 Tw (debugger. For the purposes of the tutorial, it is intended that the reader induce the boundary cases) Tj T* 0 Tw .902485 Tw (manually and see the flow of the code and to understand exactly what conditions may be signaled) Tj T* 0 Tw 1.18061 Tw (under what conditions and how to structure code to deal with them. In production code where the) Tj T* 0 Tw 3.001984 Tw (author might not care about these conditions at all, one might simply ignore all the signaled) Tj T* 0 Tw (conditions that writing to the client might cause.) Tj T* ET
Q
Q
q
1 0 0 1 23 75.26162 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.68748 Tw (Of course, the appropriateness of ignoring network boundary conditions is best determined by) Tj T* 0 Tw (context.) Tj T* ET
Q
Q
q
1 0 0 1 23 6.061623 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;; keep accepting connections forever.) Tj T* (\(loop) Tj T* (    \(format t "Waiting to accept a connection...~%"\)) Tj T*  T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
242 0 obj
<<
/Length 4625
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 367.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 372.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 384 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 362 Tm /F4 10 Tf 12 TL (    ;; Here we see with-accept-connection which simplifies closing) Tj T* (    ;; the client socket when are done with it.) Tj T* (    \(with-accept-connection \(client server :wait t\)) Tj T* (      ;; When we get a new connection, show who it) Tj T* (      ;; is from.) Tj T* (      \(multiple-value-bind \(who rport\)) Tj T* (          \(remote-name client\)) Tj T* (        \(format t "Got a connnection from ~A:~A!~%" who rport\)\)) Tj T*  T* (        ;; Since we're using an internet TCP stream, we can use format) Tj T* (        ;; with it. However, we should be sure to finish-output in) Tj T* (        ;; order that all the data is sent.) Tj T* (        \(multiple-value-bind \(s m h d mon y\)) Tj T* (            \(get-decoded-time\)) Tj T* (          \(format t "Sending the time..."\)) Tj T*  T* (          ;; Catch the condition of the client closing the connection.) Tj T* (          ;; Since we exist inside a with-accept-connection, the) Tj T* (          ;; socket will be automatically closed.) Tj T* (          \(handler-case) Tj T* (              \(progn) Tj T* (                \(format client "~A/~A/~A ~A:~A:~A~%" mon d y h m s\)) Tj T* (                \(finish-output client\)\)) Tj T*  T* (            \(socket-connection-reset-error \(\)) Tj T* (              \(format t "Client reset connection!~%"\)\)) Tj T*  T* (            \(hangup \(\)) Tj T* (              \(format t "Client closed conection!~%"\)\)\)) Tj T*  T* (          \(format t "Sent!~%"\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 361.8236 cm
Q
q
1 0 0 1 62.69291 316.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (End of the helper function, returns T to whomever called it:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (t\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 310.6236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 200.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 200.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The entry point into this example:) Tj T* ET
Q
Q
q
1 0 0 1 23 122.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.803307 Tw (We handle the condition SOCKET-ADDRESS-IN-USE-ERROR which is most commonly signaled) Tj T* 0 Tw -0.082512 Tw (when we try to bind a socket to address which already has a server running on it or when the address) Tj T* 0 Tw .177485 Tw (is in the TIME_WAIT state. The latter situation is so common--usually caused by a server just having) Tj T* 0 Tw .31061 Tw (exited and another one starting up to replace it, that when binding addresses, one should supply the) Tj T* 0 Tw .595984 Tw (keyword argument :reuse-addr with a true value to BIND-ADDRESS to allow binding a socket to an) Tj T* 0 Tw (address in TIME_WAIT state.) Tj T* ET
Q
Q
q
1 0 0 1 23 5.55748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This is the main entry point into the example 3 server.) Tj T* (\(defun run-ex3-server \() Tj (&) Tj (key \(port *port*\)\)) Tj T* (  \(handler-case) Tj T*  T* (      \(run-ex3-server-helper port\)) Tj T*  T* (    \(socket-address-in-use-error \(\)) Tj T* (      ;; Here we catch a condition which represents trying to bind to) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
243 0 obj
<<
/Length 6729
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 667.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 72.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (      ;; the same port before the first one has been released by the) Tj T* (      ;; kernel.  Generally this means you forgot to put ':reuse-addr) Tj T* (      ;; t' as an argument to bind address.) Tj T* (      \(format t "Bind: Address already in use, forget :reuse-addr t?"\)\)\)) Tj T*  T* (  \(finish-output\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 667.8236 cm
Q
q
1 0 0 1 62.69291 640.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.3.4   Daytime Server IVP4/TCP: ex4-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 562.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .081751 Tw (This is the first of our concurrent servers and the last of our daytime protocol servers. Usually concurrency) Tj T* 0 Tw .74811 Tw (is introduced \(in the UNIX environment\) with the fork\(\) library call which creates an entirely new process) Tj T* 0 Tw 1.58784 Tw (with copy-on-write semantics to handle the connection to the client. In this tutorial environment, we've) Tj T* 0 Tw 2.168735 Tw (chosen to render this idea with the portable threading library Bordeaux Threads. The I/O is still line) Tj T* 0 Tw 1.854985 Tw (oriented and blocking, however, when a thread blocks another can run giving the illusion of a server) Tj T* 0 Tw (handling multiple clients in a non-blocking fashion.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 508.8236 cm
q
BT 1 0 0 1 0 38 Tm .719147 Tw 12 TL /F1 10 Tf 0 0 0 rg (We also introduce UNWIND-PROTECT ensures that various sockets are closed under various boundary) Tj T* 0 Tw 1.091984 Tw (conditions in the execution of the server. An UNWIND-PROTECT executes a single form, and after the) Tj T* 0 Tw 1.535318 Tw (evaluation, or interruption, of that form, evaluates a special cleanup form. The cleanup form is ) Tj /F5 10 Tf (always) Tj /F1 10 Tf  T* 0 Tw (evaluated and we use this to cleanup non-memory system resources like sockets.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 454.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .71061 Tw (Threads present their own special problems in the design of a server. Two important problems are: data) Tj T* 0 Tw .228876 Tw (races and thread termination. The tutorial tries very hard to avoid any data races in the examples and this) Tj T* 0 Tw 3.209069 Tw (problem is ultimately solvable using Bordeaux-Threads mutexes or condition variables. Our simple) Tj T* 0 Tw (examples do not need mutexes as they do not share any data between themselves.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 328.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F1 10 Tf 12 TL .873828 Tw (The harder problem is thread termination. Since the tutorial encourages experimentation with the clients) Tj T* 0 Tw .097633 Tw (and servers in a REPL, threads may leak when the server process' initial thread stops execution and goes) Tj T* 0 Tw 5.363828 Tw (back to the REPL. We use three API calls from the Bordeaux Threads: THREAD-ALIVE-P,) Tj T* 0 Tw .859147 Tw (ALL-THREADS, and DESTROY-THREAD--which are not to be used in normal thread programming. We) Tj T* 0 Tw .538935 Tw (do this here in order to try and clean up leaked threads so the clients know immediately when the server) Tj T* 0 Tw .13686 Tw (process stopped and we don't pollute the REPL with an ever increasing number of executing threads. The) Tj T* 0 Tw 1.229269 Tw (employed method of destroying the threads, on SBCL specifically, allows the invocation of the thread's) Tj T* 0 Tw -0.07716 Tw (UNWIND-PROTECT's cleanup form, which closes the socket to the client before destroying the thread. On) Tj T* 0 Tw 1.76248 Tw (other implementations of Common Lisp, we are not guaranteed that the thread's UNWIND-PROTECT) Tj T* 0 Tw (cleanup form will be evaluated when we destroy it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 250.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .432485 Tw (This method is also extremely heavy handed in that it uses the function IGNORE-ERRORS to ignore any) Tj T* 0 Tw .446976 Tw (condition that Bordeaux Thread's DESTROY-THREAD may have signaled, including important conditions) Tj T* 0 Tw .21784 Tw (like HEAP-EXHAUSTED-ERROR, an SBCL specific condition. In a real threaded server, the exiting of the) Tj T* 0 Tw .081163 Tw (initial thread \(which means exiting of the runtime and termination of the entire Lisp process\) will destroy all) Tj T* 0 Tw .341163 Tw (other threads as the process tears itself down and exits. This is the recommended way a threaded server) Tj T* 0 Tw (should exit.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 196.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.684147 Tw (Since threading is implementation dependent for what guarantees are provided, any non-toy threaded) Tj T* 0 Tw 2.87784 Tw (network server will probably use the native implementation of threads for a specific Common Lisp) Tj T* 0 Tw 1.016651 Tw (implementation. An example difficult situation would be trying to terminate a thread which is blocked on) Tj T* 0 Tw (I/O. Different implementations would handle this in different ways.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 166.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .831318 Tw (The two provided examples, ex4-server and ex5-server, provide a general idea for the structuring of the) Tj T* 0 Tw (code to utilize threads.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 148.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here is the dissection of ex4-server:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 142.8236 cm
Q
q
1 0 0 1 62.69291 142.8236 cm
Q
q
1 0 0 1 62.69291 118.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .619431 Tw (A special variable which will allow the initial thread to pass a client socket to a thread handling said) Tj T* 0 Tw (client:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
244 0 obj
<<
/Length 5278
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 706.7547 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 33.26889 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.940425 0 0 .940425 0 0 cm
q
1 0 0 1 6.6 7.018107 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (;; This variable is the means by which we transmit the client socket from) Tj T* (;; the initial thread to the particular thread which will handle that client.) Tj T* (\(defvar *ex4-tls-client* nil\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 700.7547 cm
Q
q
1 0 0 1 62.69291 441.8589 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 243.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 243.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A helper function which begins with the usual recipe for a server:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F4 10 Tf 12 TL (\(defun run-ex4-server-helper \(port\)) Tj T* (  \(with-open-socket) Tj T* (    \(server :connect :passive) Tj T* (            :address-family :internet) Tj T* (            :type :stream) Tj T* (            :ipv6 nil) Tj T* (            :external-format '\(:utf-8 :eol-style :crlf\)\)) Tj T*  T* (    \(format t "Created socket: ~A[fd=~A]~%" server \(socket-os-fd server\)\)) Tj T*  T* (    ;; Bind the socket to all interfaces with specified port.) Tj T* (    \(bind-address server +ipv4-unspecified+ :port port :reuse-addr t\)) Tj T* (    \(format t "Bound socket: ~A~%" server\)) Tj T*  T* (    ;; start listening on the server socket) Tj T* (    \(listen-on server :backlog 5\)) Tj T* (    \(format t "Listening on socket bound to: ~A:~A~%") Tj T* (            \(local-host server\)) Tj T* (            \(local-port server\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 435.8589 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 325.9927 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 325.9927 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Forever more, accept a client connection on the listening socket and start a thread which handles it:) Tj T* ET
Q
Q
q
1 0 0 1 23 271.9927 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .470514 Tw (There is a lot going on in this piece of code. The first thing to notice is the UNWIND-PROTECT and) Tj T* 0 Tw 1.154651 Tw (its cleanup form. The form which UNWIND-PROTECT is guarding is an infinite loop which does a) Tj T* 0 Tw .914269 Tw (blocking accept to get a client socket, rebinds *default-special-bindings* adding to its assoc list the) Tj T* 0 Tw (binding for *ex4-tls-client*, and creates a thread which handles the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 217.9927 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.113318 Tw (The cleanup form walks all of the active client threads and destroys them, ignoring any conditions) Tj T* 0 Tw 2.372651 Tw (that may have arose while doing so. Destroying the threads prevents them from piling up and) Tj T* 0 Tw .001751 Tw (eventually causing havoc if many servers start and exit over time. In addition, it forces an eager close) Tj T* 0 Tw (on the client sockets allowing any clients to know the server went away immediately.) Tj T* ET
Q
Q
q
1 0 0 1 23 4.792733 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F4 10 Tf 12 TL (;; Here we introduce unwind-protect to ensure we properly clean up) Tj T* (;; any leftover threads when the server exits for whatever reason.) Tj T* (;; keep accepting connections forever, but if this exits for) Tj T* (;; whatever reason ensure to destroy any remaining running) Tj T* (;; threads.) Tj T* (\(unwind-protect) Tj T* (    \(loop                         ; keep accepting connections...) Tj T* (        \(format t "Waiting to accept a connection...~%"\)) Tj T* (        \(finish-output\)) Tj T* (        \(let* \(\(client \(accept-connection server :wait t\)\)) Tj T* (               ;; set up the special variable according to the) Tj T* (               ;; needs of the Bordeaux Threads package to pass in) Tj T* (               ;; the client socket we accepted to the about to be) Tj T* (               ;; created thread.  *default-special-bindings* must) Tj T* (               ;; not be modified, so here we just push a new scope) Tj T* (               ;; onto it.) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
245 0 obj
<<
/Length 5468
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 458.3591 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 281.6645 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.906103 0 0 .906103 0 0 cm
q
1 0 0 1 6.6 7.283944 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 324 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 302 Tm /F4 10 Tf 12 TL (               \(*default-special-bindings* \(acons '*ex4-tls-client* client) Tj T* (                                                   *default-special-bindings*\)\)\)) Tj T*  T* (          ;; ...and handle the connection!) Tj T* (          \(when client) Tj T* (            \(make-thread #'process-ex4-client-thread) Tj T* (                         :name 'process-ex4-client-thread\)\)\)\)) Tj T*  T* (      ;; Clean up form for uw-p.) Tj T* (      ;; Clean up all of the client threads when done.) Tj T* (      ;; This code is here for the benefit of the REPL because it is) Tj T* (      ;; intended that this tutorial be worked interactively. In a real) Tj T* (      ;; threaded server, the server would just exit--destroying the) Tj T* (      ;; server process, and causing all threads to exit which then notifies) Tj T* (      ;; the clients.) Tj T* (      \(format t "Destroying any active client threads....~%"\)) Tj T* (      \(mapc #'\(lambda \(thr\)) Tj T* (                \(when \(and \(thread-alive-p thr\)) Tj T* (                  \(string-equal "process-ex4-client-thread") Tj T* (                                \(thread-name thr\)\)\)) Tj T* (                  \(format t "Destroying: ~A~%" thr\)) Tj T* (                  ;; Ignore any conditions which might arise if a) Tj T* (                  ;; thread happened to finish in the race between) Tj T* (                  ;; liveness testing and destroying.) Tj T* (                  \(ignore-errors \(destroy-thread thr\)\)\)\)) Tj T* (            \(all-threads\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 452.3591 cm
Q
q
1 0 0 1 62.69291 317.1591 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The beginning of the thread handling the client:) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.192126 Tw (When the thread is born, the aforementioned explicit binding of the client socket to *ex4-tls-client*) Tj T* 0 Tw .449976 Tw (takes effect via the *default-special-bindings* mechanism. By declaring *ex4-tls-client* ignorable, we) Tj T* 0 Tw .70436 Tw (inform the compiler that this variable is set "elsewhere" and no warning should be emitted about its) Tj T* 0 Tw (possibly undefined value. In our case, this will always be defined at runtime in this server.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;;; The thread which handles the client connection.) Tj T* (\(defun process-ex4-client-thread \(\)) Tj T* (  ;; This variable is set outside of the context of this thread.) Tj T* (  \(declare \(ignorable *ex4-tls-client*\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 311.1591 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 201.2929 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 201.2929 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Send the time to the socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 135.2929 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .689213 Tw (The UNWIND-PROTECT in this form handles every possible case of leaving the evaluable function) Tj T* 0 Tw .520651 Tw (such as it completing normally, a condition being signaled, or by thread destruction--on SBCL! In all) Tj T* 0 Tw .402765 Tw (cases, the socket to the client is closed which cleans up OS resources and lets the client know right) Tj T* 0 Tw .115318 Tw (away the server has closed the connection. The HANDLER-CASE form here just informs us which of) Tj T* 0 Tw (the common IOLib conditions may have been signaled while writing the time to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 6.09294 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (;; We ensure the client socket is always closed!) Tj T* (\(unwind-protect) Tj T* (    \(multiple-value-bind \(who port\)) Tj T* (        \(remote-name *ex4-tls-client*\)) Tj T* (      \(format t "A thread is handling the connection from ~A:~A!~%") Tj T* (              who port\)) Tj T*  T* (      ;; Prepare the time and send it to the client.) Tj T* (      \(multiple-value-bind \(s m h d mon y\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
246 0 obj
<<
/Length 4436
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 290.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 449.4 Tm  T* ET
q
1 0 0 1 23 206.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 252 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 230 Tm /F4 10 Tf 12 TL (          \(get-decoded-time\)) Tj T* (        \(handler-case) Tj T* (            \(progn) Tj T* (              \(format t "Sending the time to ~A:~A..." who port\)) Tj T* (              \(format *ex4-tls-client*) Tj T* (                      "~A/~A/~A ~A:~A:~A~%") Tj T* (                      mon d y h m s\)) Tj T* (              \(finish-output *ex4-tls-client*\)) Tj T* (              \(format t "Sent!~%"\)\)) Tj T*  T* (          \(socket-connection-reset-error \(\)) Tj T* (            \(format t "Client ~A:~A reset the connection!~%" who port\)\)) Tj T*  T* (          \(hangup \(\)) Tj T* (            \(format t "Client ~A:~A closed connection.~%" who port\)\)\)\)\)) Tj T*  T* (  ;; Cleanup form for uw-p.) Tj T* (  \(format t "Closing connection to ~A:~A!~%") Tj T* (          \(remote-host *ex4-tls-client*\) \(remote-port *ex4-tls-client*\)\)) Tj T* (  \(close *ex4-tls-client*\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 132.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .306488 Tw (It is a bit tricky to robustly handle closing of the client socket in the thread. For example, if we bound) Tj T* 0 Tw 7.505814 Tw (the special variable *ex4-tls-client* to a lexically scoped variable and then did the) Tj T* 0 Tw -0.069349 Tw (UNWIND-PROTECT form to close the lexically scoped variable, then if this thread wakes up and gets) Tj T* 0 Tw .209318 Tw (destroyed after the lexical binding, but before the UNWIND-PROTECT, we'd lose a socket to a client) Tj T* 0 Tw (into the garbage collector.) Tj T* ET
Q
Q
q
1 0 0 1 23 126.2 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 117.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Such incorrect code would look like:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 425.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (;; This code is incorrect!) Tj T* (\(defun process-ex4-client-thread \(\)) Tj T* (  \(declare \(ignorable *ex4-tls-client*\)\)) Tj T* (  \(let \(\(client *ex4-tls-thread*\)\)) Tj T* (    ;; thread gets destroyed right here! client socket is left open!) Tj T* (    \(unwind-protect) Tj T* (        \( [evaluable form] \)) Tj T* (      \(close client\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 284.6236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 174.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 174.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The entry point into this example:) Tj T* ET
Q
Q
q
1 0 0 1 23 144.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .43811 Tw (Like earlier servers, we call the helper function and catch what happens if :reuse-addr wasn't true in) Tj T* 0 Tw (the BIND-ADDRESS function call.) Tj T* ET
Q
Q
q
1 0 0 1 23 15.55748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; The entry point into this example.) Tj T* (\(defun run-ex4-server \() Tj (&) Tj (key \(port *port*\)\)) Tj T* (  \(handler-case) Tj T*  T* (      \(run-ex4-server-helper port\)) Tj T*  T* (    ;; handle some common signals) Tj T* (    \(socket-address-in-use-error \(\)) Tj T* (      \(format t "Bind: Address already in use, forget :reuse-addr t?"\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
247 0 obj
<<
/Length 1686
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 24.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg  T* (  \(finish-output\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 715.8236 cm
Q
q
1 0 0 1 62.69291 688.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.3.5   Daytime Client/Server Commentary) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 634.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .037318 Tw (This concludes the examples using the daytime protocol. We've seen patterns emerge in how the simplest) Tj T* 0 Tw 1.12436 Tw (of clients and servers are built and began to reason about how to handle common signaled conditions.) Tj T* 0 Tw .797045 Tw (Threading, of course, increases the care one must have in order to ensure that data access and control) Tj T* 0 Tw (flow is kept consistent.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 634.8236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 192.8749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.3   Daytime Servers) Tj T* -192.8749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
248 0 obj
<<
/Length 2192
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.4   Echo Line Clients and Servers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 609.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F1 10 Tf 12 TL 1.309987 Tw (These next examples focus on the echo protocol. This is simply a server that sends back to the client) Tj T* 0 Tw -0.074749 Tw (whatever the client wrote to it. A client can request to quit talking to a server \(except ex8-server, where this) Tj T* 0 Tw .562093 Tw (feature isn't implemented\) by sending the word "quit", on a line by itself. This tells the server to close the) Tj T* 0 Tw -0.031591 Tw (connection to the client once it has finished echoing the line. The closing of the client's read socket lets the) Tj T* 0 Tw .122488 Tw (client know the connection to the server went away and that it is time to exit. We also introduce the socket) Tj T* 0 Tw 1.775366 Tw (multiplexer interface which allows concurrent processing of socket connections. This is similar to how) Tj T* 0 Tw .001412 Tw (UNIX's select\(\), epoll\(\), or kqueue\(\) works. Due to portability concerns on doing nonblocking operations on) Tj T* 0 Tw .925318 Tw (*standard-input* and *standard-output* \(we can't easily do it\) we are beholden to some form of blocking) Tj T* 0 Tw 2.466457 Tw (I/O in our clients because they interact with a human. We will explore true non-blocking I/O in the) Tj T* 0 Tw (ex8-server example since that server only has to converse with connected clients.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 609.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 162.5749 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.4   Echo Line Clients and Servers) Tj T* -162.5749 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (25) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
249 0 obj
<<
/Length 5212
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .909431 Tw (The echo clients are a group of programs which read a line from *standard-input*, write it to the server,) Tj T* 0 Tw .144104 Tw (read back the response from the server, and emit the result to *standard-output*. While there is a portable) Tj T* 0 Tw .684983 Tw (method to read "however much is available" from *standard-input*, there isn't the symmetrical method to) Tj T* 0 Tw .007045 Tw (write "whatever I'm able" to *standard-output*. For our client design, this means that all of these clients are) Tj T* 0 Tw (line oriented and do blocking I/O when reading from *standard-input* and writing to *standard-output*.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.5.1   Echo Client IPV4/TCP: ex4-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is a very basic echo client program that handles the usual conditions while talking to the server:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 171.7221 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 431.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 431.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Connect to the server and start echoing lines:) Tj T* ET
Q
Q
q
1 0 0 1 23 389.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.078735 Tw (Here we use WITH-OPEN-SOCKET to create an active socket that we then use to connect to the) Tj T* 0 Tw .787045 Tw (server. We handle HANGUP, for when the server went away before the client could write to it, and) Tj T* 0 Tw (END-OF-FILE, for when the server closes down the connection.) Tj T* ET
Q
Q
q
1 0 0 1 23 359.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.02939 Tw (Notice we call the function ex4-str-cli inside of a HANDLER-CASE macro. This allows us to not check) Tj T* 0 Tw (for any signaled conditions in ex4-str-cli and greatly simplifies its implementation.) Tj T* ET
Q
Q
q
1 0 0 1 23 329.3015 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.315984 Tw (In this specific example, we don't do anything other than notify that the condition happened since) Tj T* 0 Tw (after that the socket gets closed via WITH-OPEN-SOCKET.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 348 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 326 Tm /F4 10 Tf 12 TL (\(defun run-ex4-client-helper \(host port\)) Tj T*  T* (  ;; Create a internet TCP socket under IPV4) Tj T* (  \(with-open-socket) Tj T* (    \(socket :connect :active) Tj T* (            :address-family :internet) Tj T* (            :type :stream) Tj T* (            :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (            :ipv6 nil\)) Tj T*  T* (    ;; do a blocking connect to the daytime server on the port.) Tj T* (    \(connect socket \(lookup-hostname host\) :port port :wait t\)) Tj T*  T* (    \(format t "Connected to server ~A:~A from my local connection at ~A:~A!~%") Tj T* (            \(remote-host socket\) \(remote-port socket\)) Tj T* (            \(local-host socket\) \(local-port socket\)\)) Tj T*  T* (    \(handler-case) Tj T* (        \(ex4-str-cli socket\)) Tj T*  T* (      \(socket-connection-reset-error \(\)) Tj T* (        \(format t "Got connection reset. Server went away!"\)\)) Tj T*  T* (      \(hangup \(\)) Tj T* (        \(format t "Got hangup. Server closed connection on write!~%"\)\)) Tj T*  T* (      \(end-of-file \(\)) Tj T* (        \(format t "Got end-of-file. Server closed connection on read!~%"\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 165.7221 cm
Q
q
1 0 0 1 62.69291 111.7221 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Echo lines to the server:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .662717 Tw (Until the user inputs "quit" on a line by itself, we read a line, send it to the server, read it back, and) Tj T* 0 Tw .174198 Tw (emit it to stdout. If any of the usual conditions are signaled here, the handler-case in the Step 0 code) Tj T* 0 Tw (fires and we deal with it there.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (26) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
250 0 obj
<<
/Length 5826
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 538.5139 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 201.5098 Tm  T* ET
q
1 0 0 1 23 163.5098 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.201488 Tw (When "quit" is entered, the line is sent on the round trip to the server like usual, but this time the) Tj T* 0 Tw 1.223984 Tw (server closes the connection to the client. Unfortunately, since the client is doing blocking I/O, we) Tj T* 0 Tw 2.437674 Tw (must read another line from *standard-input* before we get any signaled condition when IOLib) Tj T* 0 Tw (discovers the socket has been closed by the server.) Tj T* ET
Q
Q
q
1 0 0 1 23 133.5098 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .494987 Tw (In practice, this means after the server closed the connection, the user must hit in order to drive the) Tj T* 0 Tw (I/O loop enough to get the signaled condition.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.964788 0 0 .964788 0 0 cm
q
1 0 0 1 6.6 6.840882 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 462 132 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F4 10 Tf 12 TL (;; read a line from stdin, write it to the server, read the response, write) Tj T* (;; it to stdout. If we read 'quit' then echo it to the server which will) Tj T* (;; echo it back to us and then close its connection to us.) Tj T* (\(defun ex4-str-cli \(socket\)) Tj T* (  \(loop) Tj T* (      \(let \(\(line \(read-line\)\)\)) Tj T* (        ;; send it to the server, get the response.) Tj T* (        \(format socket "~A~%" line\)) Tj T* (        \(finish-output socket\)) Tj T* (        \(format t "~A~%" \(read-line socket\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 532.5139 cm
Q
q
1 0 0 1 62.69291 337.9469 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 179.5669 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 179.5669 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Entry point into the example:) Tj T* ET
Q
Q
q
1 0 0 1 23 161.5669 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We handle the usual connection refused condition, but otherwise this step is unremarkable.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.864056 0 0 .864056 0 0 cm
q
1 0 0 1 6.6 7.638394 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 516 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This is the entry point into this example) Tj T* (\(defun run-ex4-client \() Tj (&) Tj (key \(host *host*\) \(port *port*\)\)) Tj T* (  \(unwind-protect) Tj T* (      \(handler-case) Tj T*  T* (          \(run-ex4-client-helper host port\)) Tj T*  T* (        ;; handle a commonly signaled error...) Tj T* (        \(socket-connection-refused-error \(\)) Tj T* (          \(format t "Connection refused to ~A:~A. Maybe the server isn't running?~%") Tj T* (                  \(lookup-hostname host\) port\)\)\)) Tj T*  T* (    ;; Cleanup form) Tj T* (    \(format t "Client Exited.~%"\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 337.9469 cm
Q
q
1 0 0 1 62.69291 310.9469 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.5.2   Echo Client IPV4/TCP: ex5a-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 244.9469 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.179488 Tw (This is the first client to use the socket multiplexer to notice when the socket to the server is ready for) Tj T* 0 Tw 2.270574 Tw (reading or writing. While the multiplexer is often used in single threaded servers it can be used for) Tj T* 0 Tw -0.01439 Tw (clients--especially clients which may talk to multiple servers like web clients. Use of the multiplexer API will) Tj T* 0 Tw .372927 Tw (require a significant change in how the code is structured. It is not recommended that the multiplexer and) Tj T* 0 Tw (threads be used simultaneously to handle network connections.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 178.9469 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.057485 Tw (Keeping in mind the fact that we ALWAYS could block while reading from *standard-input* or writing to) Tj T* 0 Tw .052651 Tw (*standard-output*, we only attempt to read/write to the standard streams when the multiplexer thinks it can) Tj T* 0 Tw -0.104223 Tw (read/write to the server without blocking. This is a change from the traditional examples of how to do this in) Tj T* 0 Tw .430488 Tw (C because in C one can determine if STDIN or STDOUT are ready in the same manner as a network file) Tj T* 0 Tw (descriptor.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 100.9469 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .723318 Tw (The first big change from our previous examples is that we stop using WITH-OPEN-SOCKET since now) Tj T* 0 Tw .800574 Tw (we must manually control when the socket to the server must be closed. This is especially important for) Tj T* 0 Tw 1.778221 Tw (clients who use active sockets. The second change is how we do the creation and registering of the) Tj T* 0 Tw .321098 Tw (handlers for reading and writing to the server socket. The third change is how to unregister a handler and) Tj T* 0 Tw .177045 Tw (close the socket associated with it under the right conditions. Other changes will be explained as we meet) Tj T* 0 Tw (them.) Tj T* ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (27) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
251 0 obj
<<
/Length 7562
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The main functions of the multiplexer API are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(make-instance 'iomux:event-base ....\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 663.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.000697 Tw (Create an instance of the event-base, and associate some properties with it, such as event-dispatch) Tj T* 0 Tw .60561 Tw (should return if the multiplexer does not have any sockets it is managing. Passed an: :exit-when-empty -) Tj T* 0 Tw (when no handlers are registered, event-dispatch will return.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 630.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(event-dispatch ...\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 586.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .371751 Tw (By default, sit in the multiplexer loop forever and handle I/O requests. It is passed the event-base binding) Tj T* 0 Tw .315988 Tw (and in addition: :once-only - run the ready handlers once then return. :timeout - when there is no I/O for a) Tj T* 0 Tw (certain amount of time return.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 553.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(set-io-handler ...\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 533.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Associates a handler with a state to be called with a specific socket. Passed an:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 527.4236 cm
Q
q
1 0 0 1 62.69291 527.4236 cm
Q
q
1 0 0 1 62.69291 515.4236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (event-base binding) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 509.4236 cm
Q
q
1 0 0 1 62.69291 497.4236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (:read or :write or :error keyword) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 491.4236 cm
Q
q
1 0 0 1 62.69291 479.4236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the handler closure) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 479.4236 cm
Q
q
1 0 0 1 62.69291 446.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(remove-fd-handlers ...\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 426.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Removes a handler for a specific state with a specific socket. Passed an:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 420.2236 cm
Q
q
1 0 0 1 62.69291 420.2236 cm
Q
q
1 0 0 1 62.69291 408.2236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (event-base binding) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 402.2236 cm
Q
q
1 0 0 1 62.69291 390.2236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an fd) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 384.2236 cm
Q
q
1 0 0 1 62.69291 372.2236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (one or more of :read t, :write t, :error t) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 372.2236 cm
Q
q
1 0 0 1 62.69291 354.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here is the example using this API.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 348.2236 cm
Q
q
1 0 0 1 62.69291 348.2236 cm
Q
q
1 0 0 1 62.69291 261.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 72.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 72.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The event base:) Tj T* ET
Q
Q
q
1 0 0 1 23 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .78528 Tw (The event-base is the object which holds the state of the multiplexer. It must be initialized and torn) Tj T* 0 Tw (down as we'll see in the entry function to this example.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (;; This will be an instance of the multiplexer.) Tj T* (\(defvar *ex5a-event-base*\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 255.0236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 145.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 145.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A helper function in which we create the active socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 79.15748 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .479983 Tw (Instead of using WITH-OPEN-SOCKET, we manually create the socket. We do this to better control) Tj T* 0 Tw 1.589213 Tw (how to close the socket. WITH-OPEN-SOCKET will try to FINISH-OUTPUT on the socket before) Tj T* 0 Tw .296457 Tw (closing it. This is bad if the socket had been previously closed or signaled a condition like HANGUP.) Tj T* 0 Tw 1.982485 Tw (Trying to write more data to an already hung up socket will simply signal another condition. To) Tj T* 0 Tw (prevent layers of condition handling code, we explicitly handle closing of the socket ourselves.) Tj T* ET
Q
Q
q
1 0 0 1 23 1.438105 cm
q
q
.95245 0 0 .95245 0 0 cm
q
1 0 0 1 6.6 6.929494 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (\(defun run-ex5a-client-helper \(host port\)) Tj T* (  ;; Create a internet TCP socket under IPV4) Tj T* (  ;; We specifically do not use with-open-socket here since that form is) Tj T* (  ;; more suited for synchronous i/o on one socket. Since we do not use that) Tj T* (  ;; form, it is up to the handlers to decide to remove and close the socket) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (28) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
252 0 obj
<<
/Length 6610
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 671.8748 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 68.14878 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.95245 0 0 .95245 0 0 cm
q
1 0 0 1 6.6 6.929494 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (  ;; when the connection to the server should be closed.) Tj T* (  \(let \(\(socket \(make-socket :connect :active) Tj T* (                             :address-family :internet) Tj T* (                             :type :stream) Tj T* (                             :external-format '\(:utf-8 :eol-style :crlf\)) Tj T* (                             :ipv6 nil\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 665.8748 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 556.0087 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 556.0087 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Connect to the server, register the socket handlers:) Tj T* ET
Q
Q
q
1 0 0 1 23 478.0087 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .524651 Tw (We protect the closing of the socket via UNWIND-PROTECT. We will talk about the ramifications of) Tj T* 0 Tw .107126 Tw (this decision in the next step which describes the UNWIND-PROTECT's cleanup form. In this section) Tj T* 0 Tw .709431 Tw (of code, we set up a read and write handler for the socket, and invoke the dispatch function, which) Tj T* 0 Tw 1.667984 Tw (will continue calling the handlers associated with the socket until the socket gets closed and the) Tj T* 0 Tw 7.074524 Tw (handlers unregistered. When this happens \(see the entrance function step for why\),) Tj T* 0 Tw (EVENT-DISPATCH returns and we continue on to the cleanup form for the UNWIND-PROTECT.) Tj T* ET
Q
Q
q
1 0 0 1 23 448.0087 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.11716 Tw (Setting up a handler in the multiplexer requires several arguments to the function set-io-handler. Here) Tj T* 0 Tw (are what the arguments to that function are:) Tj T* ET
Q
Q
q
1 0 0 1 23 442.0087 cm
Q
q
1 0 0 1 23 442.0087 cm
Q
q
1 0 0 1 23 390.8087 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 36.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (*ex5a-event-base*) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is the instance of the multiplexer for which we are setting up the handler.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 384.8087 cm
Q
q
1 0 0 1 23 333.6087 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 36.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(socket-os-fd socket\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This call returns the underlying operating system's file descriptor associated with the socket.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 327.6087 cm
Q
q
1 0 0 1 23 264.4087 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 48.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 6.22 0 Td (c.) Tj T* -6.22 0 Td ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 419.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (:read) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .284987 Tw (This keyword states that we'd like to call the handler when the socket is ready to read. There is) Tj T* 0 Tw (also :write and :error.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 258.4087 cm
Q
q
1 0 0 1 23 147.7503 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 95.65841 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (d.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 83 cm
q
q
.978508 0 0 .978508 0 0 cm
q
1 0 0 1 6.6 6.744961 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 432 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (\(make-ex5a-str-cli-read socket \(make-ex5a-client-disconnector socket\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 2.460888 Tw (The make-ex5a-str-cli-read function returns a closure over the socket and another closure) Tj T* 0 Tw 2.20816 Tw (returned by the make-ex5a-client-disconnector function. This function is what will be called) Tj T* 0 Tw .752485 Tw (when the socket is ready for reading. We will shortly explain the signature of this function and) Tj T* 0 Tw 2.432651 Tw (what gets passed to it by the multiplexer. The disconnector function will be called by the) Tj T* 0 Tw 1.47936 Tw (returned reader function if the reader function thinks that it needs to close the socket to the) Tj T* 0 Tw (server.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 147.7503 cm
Q
q
1 0 0 1 23 18.04019 cm
q
q
.774237 0 0 .774237 0 0 cm
q
1 0 0 1 6.6 8.524518 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 156 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 134 Tm /F4 10 Tf 12 TL (\(unwind-protect) Tj T* (    \(progn) Tj T* (      ;; do a blocking connect to the echo server on the port.) Tj T* (      \(connect socket \(lookup-hostname host\) :port port :wait t\)) Tj T*  T* (      \(format t "Connected to server ~A:~A from my local connection at ~A:~A!~%") Tj T* (              \(remote-host socket\) \(remote-port socket\)) Tj T* (              \(local-host socket\) \(local-port socket\)\)) Tj T*  T* (      ;; set up the handlers for read and write) Tj T* (      \(set-io-handler *ex5a-event-base*) Tj T* (                      \(socket-os-fd socket\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (29) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
253 0 obj
<<
/Length 5974
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 547.6959 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 192.3277 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.774237 0 0 .774237 0 0 cm
q
1 0 0 1 6.6 8.524518 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 576 264 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 242 Tm /F4 10 Tf 12 TL (                      :read \(make-ex5a-str-cli-read socket) Tj T* (                                                    \(make-ex5a-client-disconnector socket\)\)\)) Tj T*  T* (      \(set-io-handler *ex5a-event-base*) Tj T* (                      \(socket-os-fd socket\)) Tj T* (                      :write \(make-ex5a-str-cli-write socket) Tj T* (                                                      \(make-ex5a-client-disconnector socket\)\)\)) Tj T*  T* (      \(handler-case) Tj T* (          ;; keep processing input and output on the fd by) Tj T* (          ;; calling the relevant handlers as the socket becomes) Tj T* (          ;; ready. The relevant handlers will take care of) Tj T* (          ;; closing the socket at appropriate times.) Tj T* (          \(event-dispatch *ex5a-event-base*\)) Tj T*  T* (        ;; We'll notify the user of the client if a handler missed) Tj T* (        ;; catching common conditions.) Tj T* (        \(hangup \(\)) Tj T* (          \(format t "Uncaught hangup. Server closed connection on write!%"\)\)) Tj T* (        \(end-of-file \(\)) Tj T* (          \(format t "Uncaught end-of-file. Server closed connection on read!%"\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 541.6959 cm
Q
q
1 0 0 1 62.69291 346.4959 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 180.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 180.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Cleanup form for UNWIND-PROTECT:) Tj T* ET
Q
Q
q
1 0 0 1 23 114.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .90683 Tw (In the cleanup form, we always close the socket and we pass the function close :abort t to try and) Tj T* 0 Tw .124431 Tw (close the socket in any way possible. If we just tried closing the socket, then we might cause another) Tj T* 0 Tw .037318 Tw (condition to be signaled if a previous condition, like HANGUP, had already affected the socket. :abort) Tj T* 0 Tw 1.167488 Tw (t avoids that case. If the socket is already closed by a handler by the time we get here, closing it) Tj T* 0 Tw (again hurts nothing.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (;; Cleanup expression for uw-p.) Tj T* (;; Try to clean up if the client aborted badly and left the socket open.) Tj T* (;; It is safe to call close mutiple times on a socket.) Tj T* (;; However, we don't want to finish-output on the socket since that) Tj T* (;; might signal another condition since the io handler already closed) Tj T* (;; the socket.) Tj T* (\(format t "Client safely closing open socket to server.~%"\)) Tj T* (\(close socket :abort t\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 340.4959 cm
Q
q
1 0 0 1 62.69291 130.4959 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 195 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 195 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Make the writer function for when the socket is ready to write:) Tj T* ET
Q
Q
q
1 0 0 1 23 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .55881 Tw (This function returns a closure which is called by the multiplexer when it is ready to read something) Tj T* 0 Tw 1.63436 Tw (from the server. The arguments to the closure are fd, the underlying file descriptor for the ready) Tj T* 0 Tw .349985 Tw (socket, event, which could be :read, :write, or :error if the handler was registered multiple times, and) Tj T* 0 Tw .80186 Tw (exception, which is nil under normal conditions, :error under an error with the socket, or :timeout, if) Tj T* 0 Tw (we were using timeout operations when dealing with the socket.) Tj T* ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .617356 Tw (The closure will read a line with the function READ-LINE and write it to the server. The read will be) Tj T* 0 Tw .118221 Tw (blocking, but hopefully the write won't be since the multiplexer told us we could perform the write and) Tj T* 0 Tw .711654 Tw (not block. Obviously, is we write an enormous line, then we might block again, and in this case the) Tj T* 0 Tw 1.051654 Tw (FINISH-OUTPUT on the socket will push the data in a blocking I/O fashion until it is done and we) Tj T* 0 Tw .88528 Tw (return from the handler. So while this closure for the most part writes when ready, there are cases) Tj T* 0 Tw (under which it'll still block.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .00284 Tw (In this handler, if there is a signaled condition either reading from *standard-input* \(the END-OF-FILE) Tj T* 0 Tw 2.483828 Tw (condition\) or writing to the server socket \(the HANGUP condition\), we invoke the disconnector) Tj T* 0 Tw 1.23561 Tw (closure and pass it :close. When we get to the description of the disconnector function, you'll see) Tj T* 0 Tw (what that means.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (30) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
254 0 obj
<<
/Length 5737
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 501.3449 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 238.6787 Tm  T* ET
q
1 0 0 1 23 212.6787 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.073349 Tw (Once the disconnector closure is invoked, the handler will have been removed and the socket closed.) Tj T* 0 Tw 3.898443 Tw (This will make EVENT-DISPATCH return since the only socket it was multiplexing for was) Tj T* 0 Tw (closed--because we've told the multiplexer to do so when it was made!) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.906103 0 0 .906103 0 0 cm
q
1 0 0 1 6.6 7.283944 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 228 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 206 Tm /F4 10 Tf 12 TL (\(defun make-ex5a-str-cli-write \(socket disconnector\)) Tj T* (  ;; When this next function gets called it is because the event dispatcher) Tj T* (  ;; knows the socket to the server is writable.) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    ;; Get a line from stdin, and send it to the server) Tj T* (    \(handler-case) Tj T* (        \(let \(\(line \(read-line\)\)\)) Tj T* (          \(format socket "~A~%" line\)) Tj T* (          \(finish-output socket\)\)) Tj T*  T* (      \(end-of-file \(\)) Tj T* (        \(format t "make-ex5a-str-cli-write: User performed end-of-file!~%"\)) Tj T* (        \(funcall disconnector :close\)\)) Tj T*  T* (      \(hangup \(\)) Tj T* (        \(format t) Tj T* (                "make-ex5a-str-cli-write: server closed connection on write!~%"\)) Tj T* (        \(funcall disconnector :close\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 495.3449 cm
Q
q
1 0 0 1 62.69291 246.2859 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 234.059 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 234.059 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Make the reader function for when the socket is ready to read:) Tj T* ET
Q
Q
q
1 0 0 1 23 180.059 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.59186 Tw (This piece of code is very similar to the previous step's code, we just handle the appropriate) Tj T* 0 Tw .369984 Tw (conditions and after reading the line from the server emit it to *standard-output*. Again, even though) Tj T* 0 Tw .147882 Tw (we are told we can read from the server without blocking, if the read is large enough we will continue) Tj T* 0 Tw (to block until read-line reads the all the data and the newline.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.906103 0 0 .906103 0 0 cm
q
1 0 0 1 6.6 7.283944 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 192 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F4 10 Tf 12 TL (\(defun make-ex5a-str-cli-read \(socket disconnector\)) Tj T* (  ;; When this next function gets called it is because the event dispatcher) Tj T* (  ;; knows the socket from the server is readable.) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    ;; get a line from the server, and send it to *standard-output*) Tj T* (    \(handler-case) Tj T* (        ;; If we send "quit" to the server, it will close its connection to) Tj T* (        ;; us and we'll notice that with an end-of-file.) Tj T* (        \(let \(\(line \(read-line socket\)\)\)) Tj T* (          \(format t "~A~%" line\)) Tj T* (          \(finish-output\)\)) Tj T*  T* (      \(end-of-file \(\)) Tj T* (        \(format t "make-ex5a-str-cli-read: server closed connection on read!~%"\)) Tj T* (        \(funcall disconnector :close\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 240.2859 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 130.4198 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 130.4198 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The disconnector function:) Tj T* ET
Q
Q
q
1 0 0 1 23 52.41978 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .071235 Tw (This function returns a closure which takes an arbitrary number of arguments. If the arguments to the) Tj T* 0 Tw 1.391412 Tw (invoked closure contain :read, :write, or :error, the respective handler on the associated socket is) Tj T* 0 Tw 2.963984 Tw (removed. If none of those three are supplied, then all handlers for that socket are removed.) Tj T* 0 Tw .156098 Tw (Additionally if :close is specified, the socket is closed. While not all features of this function is used in) Tj T* 0 Tw 1.263318 Tw (this example, this function \(or a similar one using the correct event-base special variable\) is used) Tj T* 0 Tw (whenever we use the multiplexer in an example.) Tj T* ET
Q
Q
q
1 0 0 1 23 -1.580225 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.076651 Tw (The closure is called whenever a handler believes it should unregister itself or another handler, or) Tj T* 0 Tw 1.02811 Tw (close the socket. Because we will often close the socket in the disconnector closure, we can't use) Tj T* 0 Tw .677976 Tw (WITH-OPEN-SOCKET to automatically close the socket because WITH-OPEN-SOCKET may try to) Tj T* 0 Tw (flush data on the socket, signaling another condition.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (31) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
255 0 obj
<<
/Length 5595
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 529.0215 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 211.0021 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun make-ex5a-client-disconnector \(socket\)) Tj T* (  ;; When this function is called, it can be told which callback to remove, if) Tj T* (  ;; no callbacks are specified, all of them are removed! The socket can be) Tj T* (  ;; additionally told to be closed.) Tj T* (  \(lambda \() Tj (&) Tj (rest events\)) Tj T* (    \(format t "Disconnecting socket: ~A~%" socket\)) Tj T* (    \(let \(\(fd \(socket-os-fd socket\)\)\)) Tj T* (      \(if \(not \(intersection '\(:read :write :error\) events\)\)) Tj T* (          \(remove-fd-handlers *ex5a-event-base* fd :read t :write t :error t\)) Tj T* (          \(progn) Tj T* (            \(when \(member :read events\)) Tj T* (              \(remove-fd-handlers *ex5a-event-base* fd :read t\)\)) Tj T* (            \(when \(member :write events\)) Tj T* (              \(remove-fd-handlers *ex5a-event-base* fd :write t\)\)) Tj T* (            \(when \(member :error events\)) Tj T* (              \(remove-fd-handlers *ex5a-event-base* fd :error t\)\)\)\)\)) Tj T* (    ;; and finally if were asked to close the socket, we do so here) Tj T* (    \(when \(member :close events\)) Tj T* (      \(close socket :abort t\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 523.0215 cm
Q
q
1 0 0 1 62.69291 247.7622 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 260.2593 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 260.2593 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The entry point for this example and setting up the event-base:) Tj T* ET
Q
Q
q
1 0 0 1 23 194.2593 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .66186 Tw (This function is much more complex than in examples that do not use the multiplexer. Protected by) Tj T* 0 Tw 8.179976 Tw (an UNWIND-PROTECT, we first initialize the event base my calling make-instance) Tj T* 0 Tw 1.281647 Tw ('iomux:event-base. Here is where we pass the keyword argument :exit-when-empty t which states) Tj T* 0 Tw .039269 Tw (that the event-dispatch function should return when there are no more registered handlers. Once that) Tj T* 0 Tw (is done, we call the helper, catching a common condition and waiting until we return.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.825739 0 0 .825739 0 0 cm
q
1 0 0 1 6.6 7.992844 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 540 228 re B*
Q
q
BT 1 0 0 1 0 206 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This is the entry point for this example.) Tj T* (\(defun run-ex5a-client \() Tj (&) Tj (key \(host *host*\) \(port *port*\)\)) Tj T* (  \(let \(\(*ex5a-event-base* nil\)\)) Tj T* (    \(unwind-protect) Tj T* (        \(progn) Tj T* (          ;; When the connection gets closed, either intentionally in the client) Tj T* (          ;; or because the server went away, we want to leave the multiplexer) Tj T* (          ;; event loop. So, when making the event-base, we explicitly state) Tj T* (          ;; that we'd like that behavior.) Tj T* (          \(setf *ex5a-event-base*) Tj T* (                \(make-instance 'iomux:event-base :exit-when-empty t\)\)) Tj T* (          \(handler-case) Tj T* (              \(run-ex5a-client-helper host port\)) Tj T*  T* (            ;; handle a commonly signaled error...) Tj T* (            \(socket-connection-refused-error \(\)) Tj T* (              \(format t "Connection refused to ~A:~A. Maybe the server isn't running?~%") Tj T* (                      \(lookup-hostname host\) port\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 241.7622 cm
Q
q
1 0 0 1 62.69291 95.49075 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 131.2715 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (9.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 131.2715 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The cleanup form for UNWIND-PROTECT:) Tj T* ET
Q
Q
q
1 0 0 1 23 101.2715 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.454597 Tw (This cleanup form closes the *ex5a-event-base* instance. IOLib defines a method for the generic) Tj T* 0 Tw (function CLOSE which accepts an event-base and performs the necessary work to shut it down.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F4 10 Tf 12 TL (;; Cleanup form for uw-p) Tj T* (;; ensure we clean up the event base regardless of how we left the client) Tj T* (;; algorithm) Tj T* (\(when *ex5a-event-base*) Tj T* (  \(close *ex5a-event-base*\)\)) Tj T* (\(format t "Client Exited.~%"\)) Tj T* (\(finish-output\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 95.49075 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (32) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
256 0 obj
<<
/Length 5647
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .384431 Tw (While this program works just fine with human input, it has a failure when reading batch input. The failure) Tj T* 0 Tw 3.449147 Tw (is that when we get the END-OF-FILE condition when *standard-input* closes, we _immediately_) Tj T* 0 Tw .43186 Tw (unregister the read/write handlers to the server, close the socket and exit the program. This destroys any) Tj T* 0 Tw (in-flight data to/from the server and lines being echoed may be lost.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.5.3   Echo Client IPV4/TCP: ex5b-client.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 600.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .246303 Tw (In order to fix the batch input problem of ex5a-client, we will use the shutdown function which allows us to) Tj T* 0 Tw 1.455488 Tw (inform the server we are done writing data, but leave the socket open so we can read the rest of the) Tj T* 0 Tw .36311 Tw (responses from the server. This effectively closes only one-half of the TCP connection. The server has to) Tj T* 0 Tw .759461 Tw (be made aware of this kind of protocol so it doesn't assume the client completely exited when it gets an) Tj T* 0 Tw .904651 Tw (END-OF-FILE from the client and shuts down the whole connection throwing away any queued data for) Tj T* 0 Tw (the client.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 534.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.123876 Tw (This client is nearly identical to ex5a-client except we shut down the write end of the connection to the) Tj T* 0 Tw .044987 Tw (server when we get END-OF-FILE from *standard-input* and wait until we get all of the data back from the) Tj T* 0 Tw 1.201417 Tw (server. The server signifies to us that it has sent all of the pending data by closing the write end of its) Tj T* 0 Tw 2.153735 Tw (connection. The client sees the closing of the server's write end as an END-OF-FILE on the socket) Tj T* 0 Tw (connected to the server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 516.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We show this example as a difference to ex5aq-client.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 510.0236 cm
Q
q
1 0 0 1 62.69291 510.0236 cm
Q
q
1 0 0 1 62.69291 106.4859 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 388.5378 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 388.5378 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Shutdown the write end of the socket to the server:) Tj T* ET
Q
Q
q
1 0 0 1 23 310.5378 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL -0.06939 Tw (Here we use the expanded functionality of the disconnector closure. After we shut down the write end) Tj T* 0 Tw .351235 Tw (of our TCP connection, we call \(funcall disconnector :write\) which states only to remove the write \(to) Tj T* 0 Tw .457045 Tw (the server\) handler, but leave the connection open. After this happens, there is no way we can read) Tj T* 0 Tw -0.10439 Tw (from *standard-input* again. Once the server sends the final data and the closes its connection to this) Tj T* 0 Tw 5.90152 Tw (client, we remove the read handler, which removes the last handler, and causes the) Tj T* 0 Tw (EVENT-DISPATCH function to return, which ends the client computation.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.906103 0 0 .906103 0 0 cm
q
1 0 0 1 6.6 7.283944 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 336 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 314 Tm /F4 10 Tf 12 TL (\(defun make-ex5b-str-cli-write \(socket disconnector\)) Tj T* (  ;; When this next function gets called it is because the event dispatcher) Tj T* (  ;; knows the socket to the server is writable.) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    ;; Get a line from stdin, and send it to the server) Tj T* (    \(handler-case) Tj T* (        \(let \(\(line \(read-line\)\)\)) Tj T* (          \(format socket "~A~%" line\)) Tj T* (          \(finish-output socket\)\)) Tj T*  T* (      \(end-of-file \(\)) Tj T* (        \(format t) Tj T* (                "make-ex5b-str-cli-write: User performed end-of-file!~%"\)) Tj T* (        ;; Shutdown the write end of my pipe to give the inflight data the) Tj T* (        ;; ability to reach the server!) Tj T* (        \(format t) Tj T* (                "make-ex5b-str-cli-write: Shutting down write end of socket!~%"\)) Tj T* (        \(shutdown socket :write t\)) Tj T* (        ;; since we've shut down the write end of the pipe, remove this handler) Tj T* (        ;; so we can't read more data from *standard-input* and try to write it) Tj T* (        ;; it to the server.) Tj T* (        \(funcall disconnector :write\)\)) Tj T*  T* (      \(hangup \(\)) Tj T* (        \(format t) Tj T* (                "make-ex5b-str-cli-write: server closed connection on write!~%"\)) Tj T* (        \(funcall disconnector :close\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 106.4859 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (33) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
257 0 obj
<<
/Length 975
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .449461 Tw (Be aware that even if both directions on one end of a connection are shutdown, close still must be called) Tj T* 0 Tw (upon the socket in order to release resources held by the operating system.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 201.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.5   Echo Clients) Tj T* -201.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (34) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
258 0 obj
<<
/Length 5148
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.399398 Tw (The echo servers, paired to clients as per the beginning of this tutorial, further evolve to using the) Tj T* 0 Tw .53832 Tw (multiplexer and becoming more fine grained with respect to when I/O is done until we reach the ability to) Tj T* 0 Tw (perform nonblocking I/O of arbitrary read/write sizes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.6.1   Echo Server IPV4/TCP: ex5-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 612.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.03061 Tw (This threaded server is very similar to ex4-server, but instead of sending only the time, each thread) Tj T* 0 Tw -0.068106 Tw (handles an echo protocol to a client. While this is still a blocking I/O server, only a single thread talking to a) Tj T* 0 Tw .960574 Tw (client gets blocked, not the whole server. Other than the server not honoring batch input from the client) Tj T* 0 Tw (correctly, this is a common model for a class of servers due to its nonblocking behavior.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
Q
q
1 0 0 1 62.69291 536.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The special variable used to communicate the client socket to the thread:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (;; The special variable used to hold the client socket for the thread) Tj T* (;; managing it.) Tj T* (\(defvar *ex5-tls-client* nil\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 530.8236 cm
Q
q
1 0 0 1 62.69291 271.9278 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 243.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 243.8959 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The usual prologue to a server:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F4 10 Tf 12 TL (\(defun run-ex5-server-helper \(port\)) Tj T* (  \(with-open-socket) Tj T* (    \(server :connect :passive) Tj T* (            :address-family :internet) Tj T* (            :type :stream) Tj T* (            :ipv6 nil) Tj T* (            :external-format '\(:utf-8 :eol-style :crlf\)\)) Tj T*  T* (    \(format t "Created socket: ~A[fd=~A]~%" server \(socket-os-fd server\)\)) Tj T*  T* (    ;; Bind the socket to all interfaces with specified port.) Tj T* (    \(bind-address server +ipv4-unspecified+ :port port :reuse-addr t\)) Tj T* (    \(format t "Bound socket: ~A~%" server\)) Tj T*  T* (    ;; start listening on the server socket) Tj T* (    \(listen-on server :backlog 5\)) Tj T* (    \(format t "Listening on socket bound to: ~A:~A~%") Tj T* (            \(local-host server\)) Tj T* (            \(local-port server\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 265.9278 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 156.0616 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 156.0616 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (First half of creating the client threads:) Tj T* ET
Q
Q
q
1 0 0 1 23 2.861623 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL (;; keep accepting connections forever, but if this exits for whatever) Tj T* (;; reason ensure to destroy any remaining running threads.) Tj T* (\(unwind-protect) Tj T* (    \(loop) Tj T* (        \(format t "Waiting to accept a connection...~%"\)) Tj T* (        \(finish-output\)) Tj T* (        \(let* \(\(client \(accept-connection server :wait t\)\)) Tj T* (          ;; set up the special variable to store the client) Tj T* (          ;; we accepted...) Tj T* (               \(*default-special-bindings*) Tj T* (                 \(acons '*ex5-tls-client* client) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (35) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
259 0 obj
<<
/Length 4830
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 667.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 72.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (                        *default-special-bindings*\)\)\)) Tj T*  T* (          ;; ...and handle the connection!) Tj T* (          \(when client) Tj T* (            \(make-thread #'process-ex5-client-thread) Tj T* (                         :name 'process-ex5-client-thread\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 661.8236 cm
Q
q
1 0 0 1 62.69291 394.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 252.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 252.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Second half, the cleanup form for the UNWIND-PROTECT:) Tj T* ET
Q
Q
q
1 0 0 1 23 234.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We make sure to clean up only the client threads!) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 228 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 206 Tm /F4 10 Tf 12 TL (;; Clean up form for uw-p.) Tj T* (;; Clean up all of the client threads when done.) Tj T* (;; This code is here for the benefit of the REPL because it is) Tj T* (;; intended that this tutorial be worked interactively. In a real) Tj T* (;; threaded server, the server would just exit--destroying the) Tj T* (;; server process, and causing all threads to exit which then notifies) Tj T* (;; the clients.) Tj T* (\(format t "Destroying any active client threads....~%"\)) Tj T* (\(mapc #'\(lambda \(thr\)) Tj T* (          \(when \(and \(thread-alive-p thr\)) Tj T* (                     \(string-equal "process-ex5-client-thread") Tj T* (                                   \(thread-name thr\)\)\)) Tj T* (            \(format t "Destroying: ~A~%" thr\)) Tj T* (            ;; Ignore any conditions which might arise if a) Tj T* (            ;; thread happened to finish in the race between) Tj T* (            ;; liveness testing and destroying.) Tj T* (            \(ignore-errors \(destroy-thread thr\)\)\)\)) Tj T* (      \(all-threads\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 388.6236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 278.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 278.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Handle the client and deal with signaled conditions:) Tj T* ET
Q
Q
q
1 0 0 1 23 224.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL -0.131779 Tw (In this function, we ensure that under all conditions of the execution of this function, if something goes) Tj T* 0 Tw .029988 Tw (wrong, we eagerly close the socket to the client so it is not leaked into the garbage collector. We also) Tj T* 0 Tw 3.731412 Tw (handle numerous conditions the the client could generate while talking to it in the function) Tj T* 0 Tw (str-ex5-echo.) Tj T* ET
Q
Q
q
1 0 0 1 23 -0.44252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL (;; The thread which handles the client connection.) Tj T* (\(defun process-ex5-client-thread \(\)) Tj T* (  ;; declared ignorable because this dynamic variable is bound outside) Tj T* (  ;; of the context of this function.) Tj T* (  \(declare \(ignorable *ex5-tls-client*\)\)) Tj T* (  ;; no matter how we get out of the client processing loop, we always) Tj T* (  ;; close the connection.) Tj T* (  \(unwind-protect) Tj T* (      \(multiple-value-bind \(who port\)) Tj T* (          \(remote-name *ex5-tls-client*\)) Tj T* (        \(format t "A thread is handling the connection from ~A:~A!~%") Tj T* (                who port\)) Tj T*  T* (        \(handler-case) Tj T* (            ;;  perform the actual echoing algorithm) Tj T* (            \(str-ex5-echo *ex5-tls-client* who port\)) Tj T*  T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (36) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
260 0 obj
<<
/Length 4583
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 482.0747 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 257.9489 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.977449 0 0 .977449 0 0 cm
q
1 0 0 1 6.6 6.752269 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 456 276 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 254 Tm /F4 10 Tf 12 TL (          \(socket-connection-reset-error \(\)) Tj T* (            \(format t "Client ~A:~A: connection reset by peer.~%") Tj T* (                    who port\)\)) Tj T*  T* (          \(end-of-file \(\)) Tj T* (            \(format t "Client ~A:~A closed connection for a read.~%") Tj T* (                    who port\)) Tj T* (            t\)) Tj T*  T* (          \(hangup \(\)) Tj T* (            \(format t "Client ~A:~A closed connection for a write.~%") Tj T* (                    who port\)) Tj T* (            t\)\)\)) Tj T*  T* (    ;; cleanup form of the unwind-protect) Tj T* (    ;; We always close the connection to the client, even if this) Tj T* (    ;; thread gets destroyed \(at least in SBCL this cleanup form gets) Tj T* (    ;; run when this thread is destroyed\).) Tj T* (    \(format t "Closing connection to ~A:~A!~%") Tj T* (            \(remote-host *ex5-tls-client*\) \(remote-port *ex5-tls-client*\)\)) Tj T* (    \(close *ex5-tls-client*\)) Tj T* (    t\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 476.0747 cm
Q
q
1 0 0 1 62.69291 172.8747 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 288.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 288.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Actually perform the echo protocol to the client:) Tj T* ET
Q
Q
q
1 0 0 1 23 246.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .924488 Tw (Read lines from the client and echo them back. All of this I/O is blocking. If we see "quit" from the) Tj T* 0 Tw 1.01061 Tw (client, then exit the loop, which causes the UNWIND-PROTECT cleanup form in step 4 to fire and) Tj T* 0 Tw (close the connection to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F4 10 Tf 12 TL (;; The actual function which speaks to the client.) Tj T* (\(defun str-ex5-echo \(client who port\)) Tj T* (  ;; here we let signaled conditions on the boundary conditions of the) Tj T* (  ;; client \(meaning it closes its connection to us on either a read or) Tj T* (  ;; a write\) bail us out of the infinite loop) Tj T* (  \(let \(\(done nil\)\)) Tj T* (    \(loop until done) Tj T* (        do) Tj T* (          \(let \(\(line \(read-line client\)\)\)) Tj T* (            \(format t "Read line from ~A:~A: ~A~%" who port line\)) Tj T* (            \(format client "~A~%" line\)) Tj T* (            \(finish-output client\)) Tj T* (            \(format t "Wrote line to ~A:~A: ~A~%" who port line\)) Tj T*  T* (            ;; Exit the thread when the user requests it with 'quit'.) Tj T* (            ;; This forces a close to the client socket.) Tj T* (            \(when \(string= line "quit"\)) Tj T* (              \(setf done t\)\)) Tj T* (            t\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 166.8747 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57.00857 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 57.00857 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The entrance function into this example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -0.191432 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This just checks for some error conditions so we can print out a nice) Tj T* (;; message about it.) Tj T* (\(defun run-ex5-server \() Tj (&) Tj (key \(port *port*\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (37) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
261 0 obj
<<
/Length 6251
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 631.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 108.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (  \(handler-case) Tj T*  T* (      \(run-ex5-server-helper port\)) Tj T*  T* (    ;; handle some common conditions) Tj T* (    \(socket-address-in-use-error \(\)) Tj T* (      \(format t "Bind: Address already in use, forget :reuse-addr t?"\)\)\)) Tj T*  T* (  \(finish-output\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 631.8236 cm
Q
q
1 0 0 1 62.69291 604.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.6.2   Echo Server IPV4/TCP: ex6-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 562.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .189461 Tw (This is the first of the echo servers which use the multiplexer to handle multiple clients concurrently. It is a) Tj T* 0 Tw .474269 Tw (single threaded program. As mentioned before, one shouldn't mix the multiplexer and threads together to) Tj T* 0 Tw (handle network connections.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 496.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .832927 Tw (We explore a new concept with the multiplexer in that the listening server socket is itself registered with) Tj T* 0 Tw .979984 Tw (the multiplexer. The read handler \(called the listener handler in this context\) associated with this socket) Tj T* 0 Tw 1.43811 Tw (becomes ready when a client has connected to the server address. Thus, once the listening socket is) Tj T* 0 Tw .033735 Tw (ready the listener handler accepts the client and associates the line echo protocol callback with the client's) Tj T* 0 Tw (socket in the multiplexer.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 430.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.174751 Tw (The I/O design of this server is such that if the client connection is ready to read, we read a line, then) Tj T* 0 Tw 1.068488 Tw (immediately write the line back to the client in the same function without waiting to see if it is ready for) Tj T* 0 Tw 1.853876 Tw (writing. Since we are still using blocking I/O, this is ok. The reason for this example's design was to) Tj T* 0 Tw .313984 Tw (minimize the complexity of using the multiplexer in order to introduce the listener handler. Later examples) Tj T* 0 Tw (become much more complex as we push the multiplexer API farther.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 424.8236 cm
Q
q
1 0 0 1 62.69291 424.8236 cm
Q
q
1 0 0 1 62.69291 367.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The variable which holds the multiplexer instance:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (;; This variable represents the multiplexer state.) Tj T* (\(defvar *ex6-server-event-base*\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 361.6236 cm
Q
q
1 0 0 1 62.69291 231.6429 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 114.9807 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 114.9807 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A hash table of client connections:) Tj T* ET
Q
Q
q
1 0 0 1 23 72.98074 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.85332 Tw (We record each client that connects to the server into a hash table socket keyed by the list \(ip) Tj T* 0 Tw .296098 Tw (address port\) and associate with it a value of the client's socket. This is so that under any conditions) Tj T* 0 Tw (of the server exiting we can eagerly close any open connections to clients in a cleanup form.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (;; This holds any open connections to clients as keys in the table. The values) Tj T* (;; is a list containing the host and port of the connection. We use this to) Tj T* (;; close all connections to the clients, if any, when the server exits.  This) Tj T* (;; allows all clients to notice the server had gone away.) Tj T* (\(defvar *ex6-server-open-connections*\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 225.6429 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 115.7767 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 115.7767 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create and bind the server socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 85.77674 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .153984 Tw (We protect how we manipulate the server socket with an UNWIND-PROTECT so we ensure to close) Tj T* 0 Tw (the socket at the end of the server's computation or if something went wrong.) Tj T* ET
Q
Q
q
1 0 0 1 23 4.576743 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (;; Set up the server and server clients with the multiplexer) Tj T* (\(defun run-ex6-server-helper \(port\)) Tj T*  T* (  ;; We don't use with-open-socket here since we may need to have a) Tj T* (  ;; finer control over when we close the server socket.) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (38) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
262 0 obj
<<
/Length 4603
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 553.7944 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 186.2292 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.917261 0 0 .917261 0 0 cm
q
1 0 0 1 6.6 7.195332 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL (  \(let \(\(server \(make-socket :connect :passive) Tj T* (                             :address-family :internet) Tj T* (                             :type :stream) Tj T* (                             :ipv6 nil) Tj T* (                             :external-format '\(:utf-8 :eol-style :crlf\)\)\)\)) Tj T* (    \(unwind-protect) Tj T* (        \(progn) Tj T* (          \(format t "Created socket: ~A[fd=~A]~%" server \(socket-os-fd server\)\)) Tj T* (          ;; Bind the socket to all interfaces with specified port.) Tj T* (          \(bind-address server +ipv4-unspecified+ :port port :reuse-addr t\)) Tj T* (          \(format t "Bound socket: ~A~%" server\)) Tj T*  T* (          ;; start listening on the server socket) Tj T* (          \(listen-on server :backlog 5\)) Tj T* (          \(format t "Listening on socket bound to: ~A:~A~%") Tj T* (                  \(local-host server\)) Tj T* (                  \(local-port server\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 547.7944 cm
Q
q
1 0 0 1 62.69291 226.5944 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 306.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 306.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Register a listener handler on the server socket and start dispatching events with the multiplexer:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 300 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F4 10 Tf 12 TL (;; Set up the initial listener handler for any incoming clients) Tj T* (\(set-io-handler *ex6-server-event-base*) Tj T* (                \(socket-os-fd server\)) Tj T* (                :read) Tj T* (                  \(make-ex6-server-listener-handler server\)\)) Tj T*  T* (;; keep accepting connections forever.) Tj T* (\(handler-case) Tj T* (    \(event-dispatch *ex6-server-event-base*\)) Tj T*  T* (  ;; Just in case any handler misses these conditions, we) Tj T* (  ;; catch them here.) Tj T* (  \(socket-connection-reset-error \(\)) Tj T* (    \(format t "~A~A~%") Tj T* (            "Caught unexpected reset by peer! ") Tj T* (            "Client connection reset by peer!"\)\)) Tj T* (  \(hangup \(\)) Tj T* (    \(format t "~A~A~%") Tj T* (            "Caught unexpected hangup! ") Tj T* (            "Client closed connection on write!"\)\)) Tj T* (  \(end-of-file \(\)) Tj T* (    \(format t "~A~A~%") Tj T* (            "Caught unexpected end-of-file! ") Tj T* (            "Client closed connection on read!"\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 220.5944 cm
Q
q
1 0 0 1 62.69291 139.3944 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When the server stops handling clients, we close the server socket:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (;; Cleanup expression for uw-p.) Tj T* (;; Ensure the server socket is closed, regardless of how we left) Tj T* (;; the server.) Tj T* (\(close server\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 133.3944 cm
Q
q
1 0 0 1 62.69291 121.3944 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The listener handler:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (39) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
263 0 obj
<<
/Length 5487
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 479.415 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 260.6086 Tm  T* ET
q
1 0 0 1 23 222.6086 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .55811 Tw (Once the returned closure from this function is called by the multiplexer on the ready server socket,) Tj T* 0 Tw 1.536457 Tw (we accept the client with a blocking accept. We then save the client connection in our table and) Tj T* 0 Tw .55811 Tw (register the line echo closure with the socket. The line echo closure will also contain a disconnector) Tj T* 0 Tw (function as in previous usages of the multiplexer.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.694791 0 0 .694791 0 0 cm
q
1 0 0 1 6.6 9.499255 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 642 312 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 290 Tm /F4 10 Tf 12 TL (;; When the multiplexer states the server socket is ready for reading) Tj T* (;; it means that we have a client ready to accept. So we accept it and) Tj T* (;; then register the accepted client socket back into the multiplexer) Tj T* (;; with the appropritate echo protocol function.) Tj T* (\(defun make-ex6-server-listener-handler \(socket\)) Tj T* (  \(lambda \(fd event exception\)) Tj T*  T* (    ;; do a blocking accept, returning nil if no socket) Tj T* (    \(let* \(\(client \(accept-connection socket :wait t\)\)\)) Tj T* (      \(when client) Tj T* (        \(multiple-value-bind \(who port\)) Tj T* (            \(remote-name client\)) Tj T* (          \(format t "Accepted a client from ~A:~A~%" who port\)) Tj T*  T* (          ;; save the client connection in case we need to close it later) Tj T* (          ;; when the server exits.) Tj T* (          \(setf \(gethash `\(,who ,port\) *ex6-server-open-connections*\) client\)) Tj T*  T* (          ;; set up an line echo function for the client socket.) Tj T* (          \(set-io-handler *ex6-server-event-base*) Tj T* (                          \(socket-os-fd client\)) Tj T* (                          :read \(make-ex6-server-line-echoer client) Tj T* (                                                             who) Tj T* (                                                             port) Tj T* (                                                             \(make-ex6-server-disconnector client\)\)\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 473.415 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 363.5488 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 363.5488 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The line echo closure generator:) Tj T* ET
Q
Q
q
1 0 0 1 23 297.5488 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.047633 Tw (This function returns a closure which is then bound to a client socket in the multiplexer. When the) Tj T* 0 Tw .141488 Tw (socket is ready, we read a line form the client and write it back to the client immediately. Since this is) Tj T* 0 Tw 1.56686 Tw (blocking I/O the whole server will wait until this transaction is complete. This means that a client) Tj T* 0 Tw 1.609461 Tw (which sends one byte of ASCII that is not a newline can cause the whole server to block for all) Tj T* 0 Tw (clients. This serious defect is remedied with non-blocking I/O, which we show in a later example.) Tj T* ET
Q
Q
q
1 0 0 1 23 .348845 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 288 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 266 Tm /F4 10 Tf 12 TL (;; This function returns a function that reads a line, then) Tj T* (;; echoes it right back onto the socket it came from. This is blocking) Tj T* (;; i/o.  This code can suffer denial of service attacks like on page) Tj T* (;; 167 of "Unix Network Programming 2nd Edition: Sockets and XTI", by) Tj T* (;; Richard Stevens.) Tj T* (\(defun make-ex6-server-line-echoer \(socket who port disconnector\)) Tj T* (  \(format t "Creating line-echoer for ~A:~A~%" who port\)) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    \(handler-case) Tj T* (        \(let \(\(line \(read-line socket\)\)\) ;; read a line from the client) Tj T* (          \(format t "Read ~A:~A: ~A~%" who port line\)) Tj T* (          \(format socket "~A~%" line\) ;; write it the client) Tj T* (          \(finish-output socket\)) Tj T* (          \(format t "Wrote ~A:~A: ~A~%" who port line\)) Tj T*  T* (          ;; close the connection to the client if it asked to quit) Tj T* (          \(when \(string= line "quit"\)) Tj T* (            \(format t "Client requested quit!~%"\)) Tj T* (            \(funcall disconnector who port\)\)\)) Tj T*  T* (      \(socket-connection-reset-error \(\)) Tj T* (        ;; Handle the usual and common conditions we'll see while) Tj T* (        ;; talking to a client) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (40) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
264 0 obj
<<
/Length 5115
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 619.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 120.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 132 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F4 10 Tf 12 TL (        \(format t "Client's connection was reset by peer.~%"\)) Tj T* (        \(funcall disconnector who port\)\)) Tj T*  T* (      \(hangup \(\)) Tj T* (        \(format t "Client went away on a write.~%"\)) Tj T* (        \(funcall disconnector who port\)\)) Tj T*  T* (      \(end-of-file \(\)) Tj T* (        \(format t "Client went away on a read.~%"\)) Tj T* (        \(funcall disconnector who port\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 613.8236 cm
Q
q
1 0 0 1 62.69291 409.3568 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 189.4668 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 189.4668 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The disconnector closure generator:) Tj T* ET
Q
Q
q
1 0 0 1 23 123.4668 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.112485 Tw (This function returns a closure that removes all the handlers from the socket in question and then) Tj T* 0 Tw .186654 Tw (closes it. Notice that this means this server is not capable of handling batch input from a client, since) Tj T* 0 Tw 2.894651 Tw (when it receives the END-OF-FILE on the read from a client, will immediately tear down the) Tj T* 0 Tw .360574 Tw (connection destroying any in flight data. After closing the socket, we also remove it from our table of) Tj T* 0 Tw (open connections.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.977449 0 0 .977449 0 0 cm
q
1 0 0 1 6.6 6.752269 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 456 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (;; If we decide we need to disconnect ourselves from the client, this will) Tj T* (;; remove all the handlers and remove the record of our connection from) Tj T* (;; *ex6-server-open-connections*.) Tj T* (\(defun make-ex6-server-disconnector \(socket\)) Tj T* (  \(lambda \(who port\)) Tj T* (    \(format t "Closing connection to ~A:~A~%" who port\)) Tj T* (    \(remove-fd-handlers *ex6-server-event-base* \(socket-os-fd socket\)\)) Tj T* (    \(close socket\)) Tj T* (    \(remhash `\(,who ,port\) *ex6-server-open-connections*\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 403.3568 cm
Q
q
1 0 0 1 62.69291 129.3547 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 259.0021 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (9.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 259.0021 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Initialize the event-base, the connection table, and start the server:) Tj T* ET
Q
Q
q
1 0 0 1 23 229.0021 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.509982 Tw (This code is the beginning of the UNWIND-PROTECT form which protects the server's socket) Tj T* 0 Tw (resources.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This is the entrance function into this example.) Tj T* (\(defun run-ex6-server \() Tj (&) Tj (key \(port *port*\)\)) Tj T* (  \(let \(\(*ex6-server-open-connections* nil\)) Tj T* (        \(*ex6-server-event-base* nil\)\)) Tj T* (    \(unwind-protect) Tj T* (        \(handler-case) Tj T* (            \(progn) Tj T* (              ;; Clear the open connection table and init the event base) Tj T* (              \(setf *ex6-server-open-connections*) Tj T* (                    \(make-hash-table :test #'equalp\)) Tj T*  T* (                    *ex6-server-event-base*) Tj T* (                    \(make-instance 'event-base\)\)) Tj T*  T* (              \(run-ex6-server-helper port\)\)) Tj T*  T* (          ;; handle a common signal) Tj T* (          \(socket-address-in-use-error \(\)) Tj T* (            \(format t "Bind: Address already in use, forget :reuse-addr t?"\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 123.3547 cm
Q
q
1 0 0 1 62.69291 111.3547 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (10.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Cleanup the client connections and close the event-base:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (41) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
265 0 obj
<<
/Length 6167
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 503.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 236.2 Tm  T* ET
q
1 0 0 1 23 210.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.856647 Tw (When the server exits we walk the *ex6-server-open-connections* hash and eagerly close every) Tj T* 0 Tw .197045 Tw (client we find there. After we are done, we close the event-base. This ensures every thing is cleaned) Tj T* 0 Tw (up properly.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F4 10 Tf 12 TL (;; Cleanup form for uw-p) Tj T* (;; Close all open connections to the clients, if any. We do this) Tj T* (;; because when the server goes away we want the clients to know) Tj T* (;; immediately. Sockets are not memory, and can't just be garbage) Tj T* (;; collected whenever. They have to be eagerly closed.) Tj T* (\(maphash #'\(lambda \(k v\)) Tj T* (             \(format t "Closing a client connection to ~A~%" k\)) Tj T* (             ;; We don't want to signal any conditions on the close...) Tj T* (             \(close v :abort t\)\)) Tj T* (         *ex6-server-open-connections*\)) Tj T*  T* (;; and clean up the multiplexer too!) Tj T* (\(when *ex6-server-event-base*) Tj T* (  \(close *ex6-server-event-base*\)\)) Tj T* (\(format t "Server Exited~%"\)) Tj T* (\(finish-output\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 503.8236 cm
Q
q
1 0 0 1 62.69291 461.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .995868 Tw (This server uses the multiplexer in a simple fashion because only one handler is registered for a client.) Tj T* 0 Tw 1.297356 Tw (That handler reads, then writes the data back to the client. The scope of the data read from the client) Tj T* 0 Tw (never has to leave the handler function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 434.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.6.3   Echo Server IPV4/TCP: ex7-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 356.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .994104 Tw (This example is different than ex6-server because it fully separates the reading and writing of data to a) Tj T* 0 Tw -0.117661 Tw (client into different handler functions. This requires an architectural change to the server in order to be able) Tj T* 0 Tw 1.421567 Tw (to keep the data from the client "somewhere" before being able to write it back to the client when the) Tj T* 0 Tw .536651 Tw (multiplexer determines it can written to the client. We introduce an io-buffer object, implemented in terms) Tj T* 0 Tw .511488 Tw (of a closure and one per client, which stores the in-flight data until the client is ready to accept the writes) Tj T* 0 Tw (from the server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 314.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .093488 Tw (Storage of client data introduces a problem in that if the client writes lots of data to the server but happens) Tj T* 0 Tw 1.040988 Tw (to never be ready to accept it back from the server, the server will consume all memory and run out of) Tj T* 0 Tw (resources. We attempt to prevent this from happening, though not perfectly.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 236.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .143322 Tw (When the io-buffer is created for a client, we state we only would like a certain number of bytes to be read) Tj T* 0 Tw 2.191163 Tw (from the client. Of course, since we're using read-line with blocking I/O and the client could write a) Tj T* 0 Tw -0.070015 Tw (tremendous amount of data before a newline, we can't completely enforce our storage policy in this server.) Tj T* 0 Tw -0.075276 Tw (If the client, though, is well-behaved in that it sends reasonable sized lines of text--a rarity in the real world,) Tj T* 0 Tw .07061 Tw (our implemented policy is sufficient. When we reach the nonblocking I/O server example, we'll find that we) Tj T* 0 Tw (can perfectly enforce the per client data storage policy.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 194.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .632765 Tw (This server honors batch input from the client. When it sees the END-OF-FILE from the client, and it still) Tj T* 0 Tw -0.065011 Tw (has data to write, the server will attempt to write the rest of the data out as the multiplexer says the client is) Tj T* 0 Tw (ready to receive it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 176.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Since this example is quite long the server portion will just be shown as a difference to ex6-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 170.8236 cm
Q
q
1 0 0 1 62.69291 170.8236 cm
Q
q
1 0 0 1 62.69291 104.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The listener handler:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .632651 Tw 12 TL /F1 10 Tf 0 0 0 rg (The important code in this function is the call to make-ex7-io-buffer. This function returns a closure,) Tj T* 0 Tw .473828 Tw (here called io-buffer, which takes one argument, either :read-a-line or :write-a-line. When the funcall) Tj T* 0 Tw -0.110682 Tw (of io-buffer with the appropriate argument happens, ) Tj /F5 10 Tf (another) Tj /F1 10 Tf ( closure is returned and this is the closure) Tj T* 0 Tw (registered with the appropriate ready state in the multiplexer.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (42) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
266 0 obj
<<
/Length 5378
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 349.3433 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 390.6803 Tm  T* ET
q
1 0 0 1 23 388.6803 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This returned closure has bound in its lexical scope the storage needed for the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 346.6803 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.054597 Tw (Both closures returned by :read-a-line and :write-a-line have access to the same storage space) Tj T* 0 Tw .142209 Tw (unique to this object io-buffer. This is the means by which the client's write handler can get access to) Tj T* 0 Tw (the data read by the client's read handler.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.834996 0 0 .834996 0 0 cm
q
1 0 0 1 6.6 7.904231 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 534 408 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 386 Tm /F4 10 Tf 12 TL (;; Create the listener closure which accepts the client and registers the) Tj T* (;; buffer functions with it.) Tj T* (\(defun make-ex7-server-listener-handler \(socket\)) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    ;; do a blocking accept, returning nil if no socket) Tj T* (    \(let* \(\(client \(accept-connection socket :wait t\)\)\)) Tj T* (      \(when client) Tj T* (        \(multiple-value-bind \(who port\)) Tj T* (            \(remote-name client\)) Tj T* (          \(format t "Accepted a client from ~A:~A~%" who port\)) Tj T*  T* (          ;; save the client connection in case we need to close it later.) Tj T* (          \(setf \(gethash `\(,who ,port\) *ex7-open-connections*\) client\)) Tj T*  T* (          ;; We make an io-buffer, which takes care of reading from the) Tj T* (          ;; socket and echoing the information it read back onto the) Tj T* (          ;; socket.  The buffer takes care of this with two internal) Tj T* (          ;; handlers, a read handler and a write handler.) Tj T* (          \(let \(\(io-buffer \(make-ex7-io-buffer client who port) Tj T* (                                               \(make-ex7-server-disconnector client\)\)\)\)) Tj T*  T* (            ;; set up an line echo function for the client socket.  The) Tj T* (            ;; internals of the buffer will perform the appropriate) Tj T* (            ;; registration/unregistration of the required handlers at) Tj T* (            ;; the right time depending upon data availability.) Tj T*  T* (            \(set-io-handler *ex7-event-base*) Tj T* (                            \(socket-os-fd client\)) Tj T* (                            :read \(funcall io-buffer :read-a-line\)\)) Tj T*  T* (            \(set-io-handler *ex7-event-base*) Tj T* (                            \(socket-os-fd client\)) Tj T* (                            :write \(funcall io-buffer :write-a-line\)\)\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 343.3433 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 233.4772 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 233.4772 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The disconnector function:) Tj T* ET
Q
Q
q
1 0 0 1 23 203.4772 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .279985 Tw (This function is almost identical to a previous example used in ex5a-client. The only difference is the) Tj T* 0 Tw (special variable it references.) Tj T* ET
Q
Q
q
1 0 0 1 23 173.4772 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .558555 Tw (Since the io-buffer knows under what conditions it should register or unregister specific handlers for) Tj T* 0 Tw (the client socket, we need to be able to selectively remove them without disturbing the others.) Tj T* ET
Q
Q
q
1 0 0 1 23 8.341388 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun make-ex7-server-disconnector \(socket\)) Tj T* (  ;; When this function is called, it can be told which callback to remove, if) Tj T* (  ;; no callbacks are specified, all of them are removed! The socket can be) Tj T* (  ;; additionally told to be closed.) Tj T* (  \(lambda \(who port ) Tj (&) Tj (rest events\)) Tj T* (    \(let \(\(fd \(socket-os-fd socket\)\)\)) Tj T* (      \(if \(not \(intersection '\(:read :write :error\) events\)\)) Tj T* (          \(remove-fd-handlers *ex7-event-base* fd :read t :write t :error t\)) Tj T* (          \(progn) Tj T* (            \(when \(member :read events\)) Tj T* (              \(remove-fd-handlers *ex7-event-base* fd :read t\)\)) Tj T* (            \(when \(member :write events\)) Tj T* (              \(remove-fd-handlers *ex7-event-base* fd :write t\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (43) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
267 0 obj
<<
/Length 6397
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 643.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 96.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (            \(when \(member :error events\)) Tj T* (              \(remove-fd-handlers *ex7-event-base* fd :error t\)\)\)\)\)) Tj T* (    ;; and finally if were asked to close the socket, we do so here) Tj T* (    \(when \(member :close events\)) Tj T* (      \(format t "Closing connection to ~A:~A~%" who port\)) Tj T* (      \(finish-output\)) Tj T* (      \(close socket\)) Tj T* (      \(remhash `\(,who ,port\) *ex7-open-connections*\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 643.8236 cm
Q
q
1 0 0 1 62.69291 601.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .406457 Tw (Now we come to the description of the ex7-io-buffer code base. This code base interacts directly with the) Tj T* 0 Tw -0.020682 Tw (event-base multiplexer instance in order to register and unregister handlers to the client. Handlers are only) Tj T* 0 Tw (registered when there is data to write, or room to read more data up to the buffer size.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 595.8236 cm
Q
q
1 0 0 1 62.69291 595.8236 cm
Q
q
1 0 0 1 62.69291 442.6985 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 138.1251 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 138.1251 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The io-buffer closure generator and associated lexical storage:) Tj T* ET
Q
Q
q
1 0 0 1 23 84.12512 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.11186 Tw (These are the variables closed over which represent the internal state of the closure and hold the) Tj T* 0 Tw .147356 Tw (data from the client. In particular note is the fact we keep track of when a handler is registered \(since) Tj T* 0 Tw .38832 Tw (this object can register or unregister the handlers in and of itself\) and whether or not we've seen the) Tj T* 0 Tw (END-OF-FILE from a client. The line-queue will hold the actual data from the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.928699 0 0 .928699 0 0 cm
q
1 0 0 1 6.6 7.106719 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun make-ex7-io-buffer \(socket who port disconnector ) Tj (&) Tj (key \(max-bytes 4096\)\)) Tj T* (  \(let \(\(line-queue \(make-queue\)\)) Tj T* (        \(bytes-left-to-write 0\)) Tj T* (        \(read-handler-registered nil\)) Tj T* (        \(write-handler-registered nil\)) Tj T* (        \(eof-seen nil\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 436.6985 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 326.8324 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 326.8324 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The read-a-line closure:) Tj T* ET
Q
Q
q
1 0 0 1 23 224.8324 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 1.300651 Tw (This is the function which will ultimately be registered with the multiplexer hence the arguments it) Tj T* 0 Tw .205777 Tw (expects. Its job is to read a line from the client when the multiplexer said the client was readable and) Tj T* 0 Tw .16528 Tw (then store the line into the line-queue. If we have read a line, we immediately register the write-a-line) Tj T* 0 Tw -0.082012 Tw (handler with the multiplexer since we need to know when the client will be ready to accept it. If it turns) Tj T* 0 Tw .217209 Tw (out there is more data stored than the high-water mark we set, we unregister the read handler so we) Tj T* 0 Tw .900574 Tw (don't continue to keep reading data. If we get END-OF-FILE, but there is nothing left to write, then) Tj T* 0 Tw 2.702126 Tw (this handler performs a small optimization and closes the socket to the client and unregisters) Tj T* 0 Tw (everything. This prevents a needless loop through the multiplexer in this case.) Tj T* ET
Q
Q
q
1 0 0 1 23 170.8324 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .986651 Tw (The handling of END-OF-FILE is interesting in that we unregister the read handler, since we won't) Tj T* 0 Tw 2.13936 Tw (need it anymore, and mark that we've seen the END-OF-FILE. At this point, the only thing the) Tj T* 0 Tw -0.051916 Tw (multiplexer has to do with respect to this client is to write all of the lines stored in the line-queue out to) Tj T* 0 Tw (the client and close the connection to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 128.8324 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 3.837752 Tw (Of the various conditions that can be signaled, the SOCKET-CONNECTION-RESET-ERROR) Tj T* 0 Tw 2.016235 Tw (condition is the one which will shut down the whole connection by removing all handlers in the) Tj T* 0 Tw (multiplexer for this client and ultimately throw away any in-flight data.) Tj T* ET
Q
Q
q
1 0 0 1 23 -0.36764 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(labels) Tj T* (  ;; If this function notices that there is data to write, it will) Tj T* (  ;; set the io-handler on the socket for the write handler.) Tj T* (  ;; If the function notices it has read ) Tj (>) Tj (= than the max-bytes) Tj T* (  ;; it will remove itself from the handler *after* ensuring the) Tj T* (  ;; write handler is set up properly.) Tj T* (  \(\(read-a-line \(fd event exception\)) Tj T* (     \(handler-case) Tj T* (         \(let \(\(line \(format nil "~A~%" \(read-line socket\)\)\)\) ; add a \\n) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (44) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
268 0 obj
<<
/Length 4266
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 187.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 552.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 564 re B*
Q
q
BT 1 0 0 1 0 542 Tm 12 TL /F4 10 Tf 0 0 0 rg (           \(format t "Read from ~A:~A: ~A" who port line\)) Tj T* (           \(enqueue line line-queue\)) Tj T* (           \(incf bytes-left-to-write \(length line\)\)) Tj T*  T* (           \(when \() Tj (>) Tj ( bytes-left-to-write 0\)) Tj T* (             ;; If the write handler isn't registered, then do) Tj T* (             ;; it now since I have data to write.) Tj T* (             \(unless write-handler-registered) Tj T* (               \(set-io-handler *ex7-event-base*) Tj T* (                               \(socket-os-fd socket\)) Tj T* (                               :write) Tj T* (                               #'write-a-line\)) Tj T* (               \(setf write-handler-registered t\)\)\)) Tj T*  T* (           ;; Now, if there is more data than I should be) Tj T* (           ;; reading, remove myself from the io handler. When) Tj T* (           ;; the write handler notices that, after writing some) Tj T* (           ;; data, more of it can be read, it will reregister) Tj T* (           ;; the io handler for the read socket.) Tj T* (           \(when \() Tj (>) Tj (= bytes-left-to-write max-bytes\)) Tj T* (             \(funcall disconnector who port :read\)) Tj T* (             \(setf read-handler-registered nil\)\)\)) Tj T*  T* (       \(socket-connection-reset-error \(\)) Tj T* (         ;; If the client resets its connection, we close) Tj T* (         ;; everything down.) Tj T* (         \(format t "Client ~A:~A: Connection reset by peer~%" who port\)) Tj T* (         \(funcall disconnector who port :close\)\)) Tj T*  T* (       \(end-of-file \(\)) Tj T* (         ;; When we get an end of file, that doesn't necessarily) Tj T* (         ;; mean the client went away, it could just mean that) Tj T* (         ;; the client performed a shutdown on the write end of) Tj T* (         ;; its socket and it is expecting the data stored in) Tj T* (         ;; the server to be written to it.  However, if there) Tj T* (         ;; is nothing left to write and our read end is close,) Tj T* (         ;; we shall consider it that the client went away and) Tj T* (         ;; close the connection.) Tj T* (         \(format t "Client ~A:~A produced end-of-file on a read.~%") Tj T* (                 who port\)) Tj T* (         \(if \(zerop bytes-left-to-write\)) Tj T* (             \(funcall disconnector who port :close\)) Tj T* (             \(progn) Tj T* (               \(funcall disconnector who port :read\)) Tj T* (               \(setf read-handler-registered nil\)) Tj T* (               \(setf eof-seen t\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 181.8236 cm
Q
q
1 0 0 1 62.69291 127.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The write-a-line closure:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .597984 Tw (This function is somewhat symmetrical to read-a-line. It will register and unregister itself or the read) Tj T* 0 Tw .313735 Tw (handler based upon how much data is available to read/write. If the END-OF-FILE is seen and there) Tj T* 0 Tw (is nothing left to write, it will close the connection to the client and unregister everything.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (45) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
269 0 obj
<<
/Length 4058
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 645.1575 Tm  T* ET
q
1 0 0 1 23 5.95748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 648 re B*
Q
q
BT 1 0 0 1 0 626 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This function will notice that if it has written enough bytes to) Tj T* (;; bring the bytes-left-to-write under max-bytes, it will re-register) Tj T* (;; the reader io handler. If there is no data to write, it will,) Tj T* (;; after ensuring the read handler is registered, unregister itself) Tj T* (;; as to not be called constantly on a write ready socket with no) Tj T* (;; data to write.) Tj T* (\(write-a-line \(fd event exception\)) Tj T* (  \(handler-case) Tj T* (      \(progn) Tj T* (        ;; If we have something to write to the client, do so.) Tj T* (        \(when \() Tj (>) Tj ( bytes-left-to-write 0\)) Tj T* (          \(let \(\(line \(dequeue line-queue\)\)\)) Tj T* (                \(format socket "~A" line\) ;; newline is in the string.) Tj T* (                \(finish-output socket\)) Tj T* (                \(format t "Wrote to ~A:~A: ~A" who port line\)) Tj T* (                \(decf bytes-left-to-write \(length line\)\)\)\)) Tj T*  T* (            ;; If we see we've fallen below the max-bytes mark,) Tj T* (            ;; re-register the read handler to get more data for) Tj T* (            ;; us. However, don't reregister the read handler if) Tj T* (            ;; we've seen that the client closed our read end of) Tj T* (            ;; our socket.) Tj T* (            \(when \() Tj (<) Tj ( bytes-left-to-write max-bytes\)) Tj T* (              \(unless \(or eof-seen read-handler-registered\)) Tj T* (                \(set-io-handler *ex7-event-base*) Tj T* (                                \(socket-os-fd socket\)) Tj T* (                                :read) Tj T* (                                #'read-a-line\)) Tj T* (                \(setf read-handler-registered t\)\)\)) Tj T*  T* (            ;; If we notice that we don't have any data to write) Tj T* (            ;; AND have seen the end of file from the client,) Tj T* (            ;; then we close the connection to the client since) Tj T* (            ;; it will never speak to us again and we're done) Tj T* (            ;; speaking to it.) Tj T* (            ;;) Tj T* (            ;; If notice we've written all of our data and there) Tj T* (            ;; might be more to do later, then unregister the) Tj T* (            ;; write handler so we don't get called) Tj T* (            ;; unnecesarily. This might mean that sometimes we'll) Tj T* (            ;; have to make an extra trip through the) Tj T* (            ;; event-dispatcher to perform the write if we read) Tj T* (            ;; more from the client and it reregisters us.) Tj T* (            \(when \(zerop bytes-left-to-write\)) Tj T* (              \(if eof-seen) Tj T* (                  \(funcall disconnector who port :close\)) Tj T* (                  \(progn) Tj T* (                    \(funcall disconnector who port :write\)) Tj T* (                    \(setf write-handler-registered nil\)\)\)\)\)) Tj T*  T* (        \(socket-connection-reset-error \(\)) Tj T* (          ;; If I happen to get a reset, make sure the connection) Tj T* (          ;; is closed.  I shouldn't get this here, but if you) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (46) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
270 0 obj
<<
/Length 5761
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 609.2107 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 130.8129 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F4 10 Tf 0 0 0 rg (          ;; tinker with the flow of this example, it is a good) Tj T* (          ;; guard to have.) Tj T* (          \(format t "Client ~A:~A: connection reset by peer.~%" who port\)) Tj T* (          \(funcall disconnector who port :close\)\)) Tj T*  T* (        \(hangup \(\)) Tj T* (          ;; In this server, if the client doesn't accept data,) Tj T* (          ;; it also means it will never send us data again. So) Tj T* (          ;; close the connection for good.) Tj T* (          \(format t "Client ~A:~A got hangup on write.~%" who port\)) Tj T* (          \(funcall disconnector who port :close\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 603.2107 cm
Q
q
1 0 0 1 62.69291 361.8254 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 226.3853 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 226.3853 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The returned closure, which represents the io-buffer:) Tj T* ET
Q
Q
q
1 0 0 1 23 184.3853 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .766235 Tw (This is the actual closure returned by make-ex7-io-buffer and which is used to gain access into the) Tj T* 0 Tw .60229 Tw (read-a-line and write-a-line functions. It takes a single argument, either the keywords :read-a-line or) Tj T* 0 Tw (:write-a-line, and returns a reference to either internal function.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.874198 0 0 .874198 0 0 cm
q
1 0 0 1 6.6 7.549781 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 510 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F4 10 Tf 12 TL (;; This is the actual function returned from make-ex7-io-buffer) Tj T* (;; which allows us access to the read/writer in the scope of the) Tj T* (;; closure.  We will ask for the correct functions when setting) Tj T* (;; up the io handlers.  NOTE: By simply asking for the handler,) Tj T* (;; I've assumed it is to be immediately put into an iolib event) Tj T* (;; handler. This is why they are considered registered at this point.) Tj T* (\(lambda \(msg\)) Tj T* (  \(cond) Tj T* (    \(\(equalp msg :read-a-line\)) Tj T* (     \(setf read-handler-registered t\)) Tj T* (     #'read-a-line\)) Tj T* (    \(\(equalp msg :write-a-line\)) Tj T* (     \(setf write-handler-registered t\)) Tj T* (     #'write-a-line\)) Tj T* (    \(t) Tj T* (     \(error "make-ex7-buffer: Please supply :read-a-line or :write-a-line~%"\)\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 361.8254 cm
Q
q
1 0 0 1 62.69291 319.8254 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.13814 Tw (While this server still uses blocking I/O, we've laid the foundations for nonblocking I/O and memory storage) Tj T* 0 Tw .481647 Tw (enforcement. The foundations specifically are separating the read/write handlers into different pieces and) Tj T* 0 Tw (having shared lexical bindings between them.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 292.8254 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.6.4   Echo Server IPV4/TCP: ex8-server.lisp) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 274.8254 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This server uses nonblocking I/O and the multiplexer to concurrently talk to the clients.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 208.8254 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .957485 Tw (Architecturally, it is very similar to ex7-server, but the io-buffer for this server is implemented with much) Tj T* 0 Tw 1.730751 Tw (different internals. Whereas in ex7-server reading from a client used the stream function READ-LINE,) Tj T* 0 Tw .662209 Tw (writing used the stream function FORMAT, and the strings from the client were kept in a queue, now we) Tj T* 0 Tw .054651 Tw (use RECEIVE-FROM and SEND-TO along with an array of unsigned-bytes as a buffer to read/write actual) Tj T* 0 Tw (bytes from the socket.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 118.8254 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL .535868 Tw (Accessing the socket through the stream API is different than doing it through the almost raw socket API) Tj T* 0 Tw .17881 Tw (which we are about to use. RECEIVE-FROM and SEND-TO are not part of the stream interface. They are) Tj T* 0 Tw 1.092209 Tw (a lower level API in IOLib being closer to the underlying OS abstraction and as a consequence have a) Tj T* 0 Tw .977984 Tw (somewhat different set of conditions that they can signal. These different conditions have the form isys:) Tj T* 0 Tw -0.021445 Tw (like: isys:epipe, isys:ewouldblock, etc. There is some intersection with the condition names signaled by the) Tj T* 0 Tw 32.96595 Tw (stream API, such as: SOCKET-CONNECTION-RESET-ERROR, and) Tj T* 0 Tw (SOCKET-CONNECTION-REFUSED.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 100.8254 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL ([TODO figure out complete list!]) Tj T* ET
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (47) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
271 0 obj
<<
/Length 5843
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL .853555 Tw (An example of the ramifications of this API is RECEIVE-FROM. Comparing against the stream interface) Tj T* 0 Tw .943984 Tw (whose READ-LINE will signal an END-OF-FILE when the reading socket has been closed by the client,) Tj T* 0 Tw 1.279318 Tw (the function RECEIVE-FROM will return 0, signifying the end of file. The stream function FORMAT will) Tj T* 0 Tw .30683 Tw (signal HANGUP if it tries to write to a socket where the client has gone away. SEND-TO might not signal,) Tj T* 0 Tw -0.044749 Tw (or otherwise produce, any error at all when writing to a socket where the client has gone away--usually it is) Tj T* 0 Tw .98936 Tw (on the next RECEIVE-FROM that it is discovered the client went away. The bytes that SEND-TO wrote) Tj T* 0 Tw (simply vanish!) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.649431 Tw (With IOLib, it may surprise you to be told that all underlying fds in the previous examples have been) Tj T* 0 Tw (nonblocking! This is why we specified :wait t for ACCEPT-CONNECTION and CONNECT.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 585.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .053984 Tw (The IOLib library internally ensures that the stream interface blocks according to the requirements of ANSI) Tj T* 0 Tw .364597 Tw (Common Lisp. However, when we use SEND-TO and RECEIVE-FROM we automatically gain the benefit) Tj T* 0 Tw 1.54332 Tw (of the non-blocking status on the underlying fd. This is why in this example we don't explicitly set the) Tj T* 0 Tw (underlying fd to non-blocking status--it already is!) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 543.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .779985 Tw (The server code itself is described as a difference from ex7-server, but the io-buffer for this nonblocking) Tj T* 0 Tw 1.85811 Tw (server \(in file ex8-buffer.lisp\) will be described in its entirety. Also, this server honors the batch input) Tj T* 0 Tw (requirement from example client ex-5b-client, which you should use against this server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 525.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The ex8-server codes:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 519.0236 cm
Q
q
1 0 0 1 62.69291 519.0236 cm
Q
q
1 0 0 1 62.69291 339.098 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 164.9256 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 164.9256 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The listener handler \(first half\):) Tj T* ET
Q
Q
q
1 0 0 1 23 146.9256 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Accept and store the client connection.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.977449 0 0 .977449 0 0 cm
q
1 0 0 1 6.6 6.752269 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 456 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL (\(defun make-ex8-server-listener-handler \(socket\)) Tj T* (  \(lambda \(fd event exception\)) Tj T* (    ;; do a blocking accept, returning nil if no socket) Tj T* (    \(let* \(\(client \(accept-connection socket :wait t\)\)\)) Tj T* (      \(when client) Tj T* (        \(multiple-value-bind \(who port\)) Tj T* (            \(remote-name client\)) Tj T* (          \(format t "Accepted a client from ~A:~A~%" who port\)) Tj T*  T* (          ;; save the client connection in case we need to close it later.) Tj T* (          \(setf \(gethash `\(,who ,port\) *ex8-open-connections*\) client\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 333.098 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 223.2319 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 223.2319 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The listener handler \(second half\):) Tj T* ET
Q
Q
q
1 0 0 1 23 181.2319 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.859269 Tw (Like ex7-server, we register the read and write handlers. Notice though that we changed the) Tj T* 0 Tw 3.895433 Tw (keywords to the io-buffer closure to be :read-some-bytes and :write-some-bytes. This better) Tj T* 0 Tw (represents what the io-buffer is actually doing.) Tj T* ET
Q
Q
q
1 0 0 1 23 4.03186 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 168 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 146 Tm /F4 10 Tf 12 TL (;; We make an io-buffer, which takes care of reading from the) Tj T* (;; socket and echoing the information it read back onto the) Tj T* (;; socket.  The buffer takes care of this with two internal) Tj T* (;; handlers, a read handler and a write handler.) Tj T* (\(let \(\(io-buffer) Tj T* (       \(make-ex8-io-buffer client who port) Tj T* (                           \(make-ex8-server-disconnector client\)\)\)\)) Tj T*  T* (  ;; set up an unsigned byte echo function for the) Tj T* (  ;; client socket.  The internals of the buffer will) Tj T* (  ;; perform the appropriate registration/unregistration of) Tj T* (  ;; the required handlers at the right time depending upon) Tj T* (  ;; data availability.) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (48) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
272 0 obj
<<
/Length 6119
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 607.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 132.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL  T* (  \(set-io-handler *ex8-event-base*) Tj T* (                  \(socket-os-fd client\)) Tj T* (                  :read) Tj T* (                  \(funcall io-buffer :read-some-bytes\)\)) Tj T*  T* (  \(set-io-handler *ex8-event-base*) Tj T*  T* (                  \(socket-os-fd client\)) Tj T* (                  :write) Tj T* (                  \(funcall io-buffer :write-some-bytes\)\)\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 607.8236 cm
Q
q
1 0 0 1 62.69291 589.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The rest of the server is extremely similar to ex7-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 571.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now, we'll show the io-buffer specific to ex8-server.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 565.8236 cm
Q
q
1 0 0 1 62.69291 565.8236 cm
Q
q
1 0 0 1 62.69291 294.6658 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 256.1578 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 256.1578 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The internal state of the io-buffer closure:) Tj T* ET
Q
Q
q
1 0 0 1 23 226.1578 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .314985 Tw (The binding echo-buf is an unsigned-byte array of size max-bytes. This is where data from the client) Tj T* 0 Tw (is stored before it is written back to the client.) Tj T* ET
Q
Q
q
1 0 0 1 23 196.1578 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .13811 Tw (The binding read-index keeps track of the beginning of the empty space in the echo-buf buffer where) Tj T* 0 Tw (more data could be stored during a read.) Tj T* ET
Q
Q
q
1 0 0 1 23 190.1578 cm
Q
q
1 0 0 1 23 94.15781 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 60 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .904985 Tw (The binding write-index keeps track of how much data has been written to the client. It moves) Tj T* 0 Tw .033516 Tw (towards read-index, and when it has the same value as read-index it means that there is no data) Tj T* 0 Tw (left to write to the client.) Tj T* ET
Q
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.735529 Tw (The bindings read-handler-registered and write-handler-registered allow the io-buffer to know) Tj T* 0 Tw (when it has registered a handler for reading and writing data.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .928651 Tw (The binding eof-seen marks when the client has closed its write connection to the server. The) Tj T* 0 Tw (server will push out all data to the client, then close socket to the client.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 94.15781 cm
Q
q
1 0 0 1 23 -3 cm
q
q
.917261 0 0 .917261 0 0 cm
q
1 0 0 1 6.6 7.195332 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (\(defun make-ex8-io-buffer \(socket who port disconnector ) Tj (&) Tj (key \(max-bytes 16384\)\)) Tj T* (  \(let \(\(echo-buf \(make-array max-bytes :element-type 'unsigned-byte\)\)) Tj T* (        \(read-index 0\)) Tj T* (        \(write-index 0\)) Tj T* (        \(read-handler-registered nil\)) Tj T* (        \(write-handler-registered nil\)) Tj T* (        \(eof-seen nil\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 288.6658 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 178.7997 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 178.7997 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Reading bytes form the client:) Tj T* ET
Q
Q
q
1 0 0 1 23 52.79967 cm
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F1 10 Tf 12 TL .248876 Tw (In this function, we will convert the return value 0 of RECEIVE-FROM on the read of a closed socket) Tj T* 0 Tw 2.781318 Tw (into a signaled END-OF-FILE condition to keep the structure of our code similar to what has) Tj T* 0 Tw 1.469983 Tw (transpired before. Once we read some bytes, we increment the read-index pointer and ensure to) Tj T* 0 Tw .44104 Tw (register a write handler to write the data back out. We optimize the writing process a little bit and try) Tj T* 0 Tw .878409 Tw (to write the data out immediately without checking to see if the socket is ready. Then if there is no) Tj T* 0 Tw .772927 Tw (more room in the echo-buf array, we unregister ourselves so we don't try and read more data from) Tj T* 0 Tw .159989 Tw (the client until we are ready to accept it \(by having written all of the data back to the client\). We mark) Tj T* 0 Tw .24436 Tw (the END-OF-FILE flag and unregister the read handler if we see the client has closed its connection.) Tj T* 0 Tw .263672 Tw (We optimize the knowledge that if we have no more data to write we just close the connection to the) Tj T* 0 Tw (client.) Tj T* ET
Q
Q
q
1 0 0 1 23 -4.40033 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (\(labels) Tj T* (  ;; This is the function responsible for reading bytes from the client.) Tj T* (  \(\(read-some-bytes \(fd event exception\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (49) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
273 0 obj
<<
/Length 3785
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 645.1575 Tm  T* ET
q
1 0 0 1 23 5.95748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 648 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 626 Tm /F4 10 Tf 12 TL (     \(handler-case) Tj T* (         \(progn) Tj T* (           ;; Read however much we are able.) Tj T* (           \(multiple-value-bind \(buf bytes-read\)) Tj T* (               \(receive-from socket) Tj T* (                             :buffer echo-buf) Tj T* (                             :start read-index) Tj T* (                             :end max-bytes\)) Tj T*  T* (             ;; Unlike read-ing from a stream, receive-from) Tj T* (             ;; returns zero on an end-of-file read, so we turn) Tj T* (             ;; around and signal that condition so our) Tj T* (             ;; handler-case can deal with it properly like our) Tj T* (             ;; other examples.) Tj T* (             \(when \(zerop bytes-read\)) Tj T* (               \(error 'end-of-file\)\)) Tj T*  T* (             \(format t "Read ~A bytes from ~A:~A~%" bytes-read who port\)) Tj T* (             \(incf read-index bytes-read\)\)) Tj T*  T* (           ;; Register the write handler if there is data to) Tj T* (           ;; write.) Tj T* (           ;;) Tj T* (           ;; Then, try to write some data to the socket right) Tj T* (           ;; away even though it might not be ready simply to) Tj T* (           ;; avoid another go around. The write-some-bytes) Tj T* (           ;; function must be able to catch econnreset because) Tj T* (           ;; this connection may be closed at the time of this) Tj T* (           ;; call. Normally, if the multiplexer has told me I) Tj T* (           ;; could write then it'd be ok, but since this write) Tj T* (           ;; is outside of the multiplexer and an optimization,) Tj T* (           ;; it needs to check.) Tj T* (           \(when \(/= write-index read-index\)) Tj T* (             \(unless write-handler-registered) Tj T* (               \(set-io-handler *ex8-event-base*) Tj T* (                               \(socket-os-fd socket\)) Tj T* (                               :write) Tj T* (                               #'write-some-bytes\)) Tj T* (               \(setf write-handler-registered t\)\)) Tj T*  T* (             ;; See if I can write it right away!) Tj T* (             \(write-some-bytes fd :write nil\)\)) Tj T*  T* (           ;; If I'm out of room to store more data then remove) Tj T* (           ;; myself from the io handler. When the write handler) Tj T* (           ;; notices that it has finished writing everything,) Tj T* (           ;; all indicies get set back to zero and the write) Tj T* (           ;; handler removes itself.  If write-some-bytes in) Tj T* (           ;; the call above worked, then read-index might not) Tj T* (           ;; equal max-bytes when this line of code gets) Tj T* (           ;; executed.) Tj T* (           \(when \(= read-index max-bytes\)) Tj T* (             \(funcall disconnector who port :read\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (50) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
274 0 obj
<<
/Length 5185
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 451.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 288.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 300 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F4 10 Tf 12 TL (             \(setf read-handler-registered nil\)\)\)) Tj T*  T* (       \(socket-connection-reset-error \(\)) Tj T* (         ;; Handle the client sending a reset.) Tj T* (         \(format t "Client ~A:~A: connection reset by peer.~%" who port\)) Tj T* (         \(funcall disconnector who port :close\)\)) Tj T*  T* (       \(end-of-file \(\)) Tj T* (         ;; When we get an end of file, that doesn't necessarily) Tj T* (         ;; mean the client went away, it could just mean that) Tj T* (         ;; the client performed a shutdown on the write end of) Tj T* (         ;; its socket and it is expecting the data stored in) Tj T* (         ;; the server to be written to it.  However, if there) Tj T* (         ;; is nothing left to write and our read end is closed,) Tj T* (         ;; we shall consider it that the client went away and) Tj T* (         ;; close the connection.) Tj T* (         \(format t "Client ~A:~A produced end-of-file on a read.~%") Tj T* (                 who port\)) Tj T* (         \(if \(= read-index write-index\)) Tj T* (             \(funcall disconnector who port :close\)) Tj T* (             \(progn) Tj T* (               \(funcall disconnector who port :read\)) Tj T* (               \(setf read-handler-registered nil\)) Tj T* (               \(setf eof-seen t\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 445.8236 cm
Q
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 335.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 335.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Writing bytes to the client:) Tj T* ET
Q
Q
q
1 0 0 1 23 257.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .682765 Tw (While there are more bytes to write, we write them, keeping track of how much we wrote. Once we) Tj T* 0 Tw 3.451751 Tw (are out of data to write, we unregister the write handler, since we don't want to be called) Tj T* 0 Tw -0.01189 Tw (unnecessarily--usually the client socket is always ready to write. If we've seen the eof marker and are) Tj T* 0 Tw .541567 Tw (out of data, we close the client connection and are done. If we haven't seen it, then we determine if) Tj T* 0 Tw .138988 Tw (we are at the end of the buffer, if so, we reset the indices to the beginning. Either way, we re-register) Tj T* 0 Tw (the read handler to acquire more data.) Tj T* ET
Q
Q
q
1 0 0 1 23 155.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 4.095433 Tw (We handle some new conditions here: isys:ewouldblock is needed because sometimes the) Tj T* 0 Tw .493322 Tw (underlying OS will mark an fd as ready to write when in fact it isn't when we get around to writing it.) Tj T* 0 Tw .585777 Tw (We might also see this condition when we tried to optimize the write of the data in the read handler) Tj T* 0 Tw 1.114985 Tw (since we did it outside of the multiplexer--this is idiomatic and saves a trip through the multiplexer) Tj T* 0 Tw .393984 Tw (more often than not. Seeing isys:ewouldblock simply aborts the write and we'll try again later. Under) Tj T* 0 Tw .003555 Tw (some conditions, send-to will signal an isys:epipe error, which means the client closed its connection.) Tj T* 0 Tw 1.254988 Tw (It is similar to a HANGUP condition in a format call with the stream API. We treat it similarly to a) Tj T* 0 Tw (HANGUP.) Tj T* ET
Q
Q
q
1 0 0 1 23 2.75748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F4 10 Tf 0 0 0 rg (;; This is the function responsible for writing bytes to the client.) Tj T* (\(write-some-bytes \(fd event exception\)) Tj T* (  \(handler-case) Tj T* (      \(progn) Tj T* (        ;; If there is data to be written, write it.  NOTE:) Tj T* (        ;; There is often no indication of failure to write) Tj T* (        ;; with send-to. If I'm writing to a closed \(by the) Tj T* (        ;; client\) socket, it could be that send-to tells me) Tj T* (        ;; nothing is wrong and returns the number of bytes) Tj T* (        ;; wrotten. In this case, nothing was written but we) Tj T* (        ;; have no way of knowing. Usually in this case, the) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (51) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
275 0 obj
<<
/Length 3783
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 94.86614 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 645.1575 Tm  T* ET
q
1 0 0 1 23 5.95748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 648 re B*
Q
q
BT 1 0 0 1 0 626 Tm 12 TL /F4 10 Tf 0 0 0 rg (        ;; read handler will get a 0 bytes read on the socket) Tj T* (        ;; and we can know the connection is broken.) Tj T* (        \(when \() Tj (>) Tj ( read-index write-index\)) Tj T* (          \(let \(\(wrote-bytes \(send-to socket echo-buf) Tj T* (                                      :start write-index) Tj T* (                                      :end read-index\)\)\)) Tj T* (            \(format t "Wrote ~A bytes to ~A:~A~%" wrote-bytes who port\)) Tj T* (            \(incf write-index wrote-bytes\)\)\)) Tj T*  T* (        ;; If we see we're out of data to write and we saw an eof,) Tj T* (        ;; then close the connection, we're done. If we didn't see an) Tj T* (        ;; eof, then unregister the write handler and reregister the) Tj T* (        ;; read handler to get more data. If the buffer indices) Tj T* (        ;; are at the very end, reset them to the beginning.) Tj T* (        \(when \(= read-index write-index\)) Tj T* (          \(if eof-seen) Tj T* (              \(funcall disconnector who port :close\)) Tj T* (              \(progn) Tj T*  T* (                ;; nothing more to write, so unregister writer) Tj T* (                \(funcall disconnector who port :write\)) Tj T* (                \(setf write-handler-registered nil\)) Tj T*  T* (                ;; If we're at the end of the buffer, move to the) Tj T* (                ;; beginning so there is more room for data.) Tj T* (                \(when \(= read-index write-index max-bytes\)) Tj T* (                  \(setf read-index 0) Tj T* (                        write-index 0\)\)) Tj T*  T* (                ;; Reregister the read handler to get more data) Tj T* (                \(unless read-handler-registered) Tj T* (                  \(set-io-handler *ex8-event-base*) Tj T* (                                  \(socket-os-fd socket\)) Tj T* (                                  :read) Tj T* (                                  #'read-some-bytes\)) Tj T* (                  \(setf read-handler-registered t\)\)\)\)\)\)) Tj T*  T* (    \(socket-connection-reset-error \(\)) Tj T* (      ;; If for somer eaon the client reset the network connection,) Tj T* (      ;; we'll get this signal.) Tj T* (      \(format t "Client ~A:~A: connection reset by peer.~%" who port\)) Tj T* (      \(funcall disconnector who port :close\)\)) Tj T*  T* (    \(isys:ewouldblock \(\)) Tj T* (      ;; Sometimes this happens on a write even though it) Tj T* (      ;; might have been marked as ready. Also we might have) Tj T* (      ;; asked to write on an unknown status socket. Ignore) Tj T* (      ;; it and we will try again later.) Tj T* (      \(format t "write-some-bytes: ewouldblock~%"\)) Tj T* (      nil\)) Tj T*  T* (    \(isys:epipe \(\)) Tj T* (      ;; In this server, if the client doesn't accept data,) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (52) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
276 0 obj
<<
/Length 2940
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 48.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (      ;; it also means it will never send us data again. So) Tj T* (      ;; close the connection for good.) Tj T* (      \(format t "Client ~A:~A got hangup on write.~%" who port\)) Tj T* (      \(funcall disconnector who port :close\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 685.8236 cm
Q
q
1 0 0 1 62.69291 462.2463 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 208.5774 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 208.5774 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The returned closure of the io-buffer:) Tj T* ET
Q
Q
q
1 0 0 1 23 178.5774 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.115731 Tw (Much like make-ex7-io-buffer, we return one of the internal closures which are appropriate for reading) Tj T* 0 Tw (or writing by the multiplexer.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.799159 0 0 .799159 0 0 cm
q
1 0 0 1 6.6 8.258681 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 558 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL (;; This is the function returned from make-ex8-io-buffer which) Tj T* (;; allows us access to the read/writer in the scope of the) Tj T* (;; closure.  We will ask for the correct functions when setting) Tj T* (;; up the io handlers.  NOTE: By simply asking for the handler,) Tj T* (;; I've assumed it is to be immediately put into an iolib event) Tj T* (;; handler. This is why they are considered registered at this) Tj T* (;; point.) Tj T* (\(lambda \(msg\)) Tj T* (  \(cond) Tj T* (    \(\(equalp msg :read-some-bytes\)) Tj T* (     \(setf read-handler-registered t\)) Tj T* (     #'read-some-bytes\)) Tj T* (    \(\(equalp msg :write-some-bytes\)) Tj T* (     \(setf write-handler-registered t\)) Tj T* (     #'write-some-bytes\)) Tj T* (    \(t) Tj T* (     \(error "make-ex8-buffer: Please supply :read-some-bytes or :write-some-bytes~%"\)\)\)\)\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 462.2463 cm
Q
q
1 0 0 1 62.69291 462.2463 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 199.8149 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.6   Echo Servers) Tj T* -199.8149 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (53) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
277 0 obj
<<
/Length 1115
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.7   Future Directions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.257674 Tw (Of course, more information should go into this tutorial, such as non-blocking connects/accepts, urgent) Tj T* 0 Tw (TCP data, UDP examples, and IPV6. As time permits or contributions come in, these will be added.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 191.7599 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.7   Future Directions) Tj T* -191.7599 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (54) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
278 0 obj
<<
/Length 9177
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (2.8   Appendix A) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.82061 Tw (This holds a rough approximation between the sources in this tutorial and the original sources in the) Tj T* 0 Tw 1.959983 Tw (network programming book by Stevens mentioned in the beginning of the tutorial. Aspects about the) Tj T* 0 Tw (implementation of each client or server are summarized here.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.8.1   The Clients) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 1.5, page 6) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
Q
q
1 0 0 1 62.69291 642.0236 cm
Q
q
1 0 0 1 62.69291 630.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex1-client: Blocking I/O, daytime client, C Style) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 630.0236 cm
Q
q
1 0 0 1 62.69291 612.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 1.5, page 6) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
Q
q
1 0 0 1 62.69291 594.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex2-client: Blocking I/O, daytime client, Lisp Style) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 594.0236 cm
Q
q
1 0 0 1 62.69291 576.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 1.5, page 6) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
Q
q
1 0 0 1 62.69291 570.0236 cm
Q
q
1 0 0 1 62.69291 558.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex3-client: ex2-client, but with much more error handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 558.0236 cm
Q
q
1 0 0 1 62.69291 540.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 5.4, 5.5, page 114, 115) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 534.0236 cm
Q
q
1 0 0 1 62.69291 534.0236 cm
Q
q
1 0 0 1 62.69291 522.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex4-client: Blocking I/O, line oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 522.0236 cm
Q
q
1 0 0 1 62.69291 504.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 6.9, page 157) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 498.0236 cm
Q
q
1 0 0 1 62.69291 498.0236 cm
Q
q
1 0 0 1 62.69291 486.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex5a-client: I/O multiplexing with iolib, line oriented, blocking I/O) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 480.0236 cm
Q
q
1 0 0 1 62.69291 456.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .02061 Tw (note: since this is still blocking I/O, I'm using *standard-input* and friends. Also note, with batch input,) Tj T* 0 Tw (it will close the socket with in-flight data still present which is incorrect.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 456.0236 cm
Q
q
1 0 0 1 62.69291 438.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 6.13, page 162) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 432.0236 cm
Q
q
1 0 0 1 62.69291 432.0236 cm
Q
q
1 0 0 1 62.69291 408.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .643828 Tw (ex5b-client: Same as ex5a-client EXCEPT shutdown is called when the input reaches end-of-file as) Tj T* 0 Tw (to prevent in flight data from being destroyed on the way to the server.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 408.0236 cm
Q
q
1 0 0 1 62.69291 381.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf 0 0 0 rg (2.8.2   The servers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 363.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 4.11, page 101) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 357.0236 cm
Q
q
1 0 0 1 62.69291 357.0236 cm
Q
q
1 0 0 1 62.69291 345.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex1-server: Iterative, blocking I/O daytime server, C Style, no error handling, one shot, line oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 345.0236 cm
Q
q
1 0 0 1 62.69291 327.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 4.11, page 101) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.0236 cm
Q
q
1 0 0 1 62.69291 321.0236 cm
Q
q
1 0 0 1 62.69291 297.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.713828 Tw (ex2-server: Iterative, blocking I/O daytime server, Lisp Style, no error handling, loop forever, line) Tj T* 0 Tw (oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 297.0236 cm
Q
q
1 0 0 1 62.69291 279.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 4.11, page 101) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 273.0236 cm
Q
q
1 0 0 1 62.69291 273.0236 cm
Q
q
1 0 0 1 62.69291 261.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex3-server: daytime server, ex2-server, but with error handling, line oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 261.0236 cm
Q
q
1 0 0 1 62.69291 243.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 4.13, page 105) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 237.0236 cm
Q
q
1 0 0 1 62.69291 237.0236 cm
Q
q
1 0 0 1 62.69291 225.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex4-server: daytime server, concurrent, blocking I/O, line oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 225.0236 cm
Q
q
1 0 0 1 62.69291 207.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 5.2, 5.3, page 113, 114) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 201.0236 cm
Q
q
1 0 0 1 62.69291 201.0236 cm
Q
q
1 0 0 1 62.69291 189.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex5-server: Concurrent, blocking I/O, echo server, line oriented) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 189.0236 cm
Q
q
1 0 0 1 62.69291 171.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 6.21,6.22 page 165,166) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 165.0236 cm
Q
q
1 0 0 1 62.69291 165.0236 cm
Q
q
1 0 0 1 62.69291 153.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ex6-server: I/O multiplexing of clients with iolib, line oriented, blocking I/O) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 153.0236 cm
Q
q
1 0 0 1 62.69291 135.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Figure 6.21, 6.22 page 165,166) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 129.0236 cm
Q
q
1 0 0 1 62.69291 129.0236 cm
Q
q
1 0 0 1 62.69291 105.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .346905 Tw (ex7-server, ex7-buffer: individual I/O handlers for read/write, I/O multiplexing of clients with iolib, line) Tj T* 0 Tw (oriented, blocking I/O, has problem with denial of service, page 167.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 105.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 204.2549 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.8   Appendix A) Tj T* -204.2549 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (55) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
279 0 obj
<<
/Length 909
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .896647 Tw (Figure 15.3, 15.4, 15.5 page 400-403 - ex8-server, ex8-buffer: nonblocking I/O, event-dispatch, send-to,) Tj T* 0 Tw (receive-from) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 204.2549 0 Td 12 TL /F1 10 Tf 0 0 0 rg (2.8   Appendix A) Tj T* -204.2549 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (56) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
280 0 obj
<<
/Length 1541
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 732.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (3   Bibliography) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 669.3307 cm
Q
q
1 0 0 1 62.69291 640.9843 cm
n 0 14.17323 m 469.8898 14.17323 l S
Q
q
1 0 0 1 62.69291 574.9843 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 54 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (STEVENS1997) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 54 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stevens, W. Richard \(1997\)) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (UNIX Network Programming, Networking APIs: Sockets and XTI) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 18 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2nd Ed. Prentice Hall.) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ISBN) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL ( 978-0134900124.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 56.69291 773.1969 cm
q
BT 1 0 0 1 0 2 Tm 206.4849 0 Td 12 TL /F1 10 Tf 0 0 0 rg (3   Bibliography) Tj T* -206.4849 0 Td ET
Q
Q
q
1 0 0 1 56.69291 56.69291 cm
q
1 1 1 rg
n 0 18 481.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://pages.cs.wisc.edu/~psilord/) Tj T* ET
Q
Q
q
1 0 0 1 362.5984 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (57) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 356.5984 0 m 356.5984 18 l S
n 0 18 m 481.8898 18 l S
n 0 0 m 481.8898 0 l S
n 0 0 m 0 18 l S
n 481.8898 0 m 481.8898 18 l S
Q
Q
Q
 
endstream
endobj
281 0 obj
<<
/Nums [ 0 282 0 R 1 283 0 R 2 284 0 R 3 285 0 R 4 286 0 R 
  5 287 0 R 6 288 0 R 7 289 0 R 8 290 0 R 9 291 0 R 
  10 292 0 R 11 293 0 R 12 294 0 R 13 295 0 R 14 296 0 R 
  15 297 0 R 16 298 0 R 17 299 0 R 18 300 0 R 19 301 0 R 
  20 302 0 R 21 303 0 R 22 304 0 R 23 305 0 R 24 306 0 R 
  25 307 0 R 26 308 0 R 27 309 0 R 28 310 0 R 29 311 0 R 
  30 312 0 R 31 313 0 R 32 314 0 R 33 315 0 R 34 316 0 R 
  35 317 0 R 36 318 0 R 37 319 0 R 38 320 0 R 39 321 0 R 
  40 322 0 R 41 323 0 R 42 324 0 R 43 325 0 R 44 326 0 R 
  45 327 0 R 46 328 0 R 47 329 0 R 48 330 0 R 49 331 0 R 
  50 332 0 R 51 333 0 R 52 334 0 R 53 335 0 R 54 336 0 R 
  55 337 0 R 56 338 0 R ]
>>
endobj
282 0 obj
<<
/S /D /St 1
>>
endobj
283 0 obj
<<
/S /D /St 2
>>
endobj
284 0 obj
<<
/S /D /St 3
>>
endobj
285 0 obj
<<
/S /D /St 4
>>
endobj
286 0 obj
<<
/S /D /St 5
>>
endobj
287 0 obj
<<
/S /D /St 6
>>
endobj
288 0 obj
<<
/S /D /St 7
>>
endobj
289 0 obj
<<
/S /D /St 8
>>
endobj
290 0 obj
<<
/S /D /St 9
>>
endobj
291 0 obj
<<
/S /D /St 10
>>
endobj
292 0 obj
<<
/S /D /St 11
>>
endobj
293 0 obj
<<
/S /D /St 12
>>
endobj
294 0 obj
<<
/S /D /St 13
>>
endobj
295 0 obj
<<
/S /D /St 14
>>
endobj
296 0 obj
<<
/S /D /St 15
>>
endobj
297 0 obj
<<
/S /D /St 16
>>
endobj
298 0 obj
<<
/S /D /St 17
>>
endobj
299 0 obj
<<
/S /D /St 18
>>
endobj
300 0 obj
<<
/S /D /St 19
>>
endobj
301 0 obj
<<
/S /D /St 20
>>
endobj
302 0 obj
<<
/S /D /St 21
>>
endobj
303 0 obj
<<
/S /D /St 22
>>
endobj
304 0 obj
<<
/S /D /St 23
>>
endobj
305 0 obj
<<
/S /D /St 24
>>
endobj
306 0 obj
<<
/S /D /St 25
>>
endobj
307 0 obj
<<
/S /D /St 26
>>
endobj
308 0 obj
<<
/S /D /St 27
>>
endobj
309 0 obj
<<
/S /D /St 28
>>
endobj
310 0 obj
<<
/S /D /St 29
>>
endobj
311 0 obj
<<
/S /D /St 30
>>
endobj
312 0 obj
<<
/S /D /St 31
>>
endobj
313 0 obj
<<
/S /D /St 32
>>
endobj
314 0 obj
<<
/S /D /St 33
>>
endobj
315 0 obj
<<
/S /D /St 34
>>
endobj
316 0 obj
<<
/S /D /St 35
>>
endobj
317 0 obj
<<
/S /D /St 36
>>
endobj
318 0 obj
<<
/S /D /St 37
>>
endobj
319 0 obj
<<
/S /D /St 38
>>
endobj
320 0 obj
<<
/S /D /St 39
>>
endobj
321 0 obj
<<
/S /D /St 40
>>
endobj
322 0 obj
<<
/S /D /St 41
>>
endobj
323 0 obj
<<
/S /D /St 42
>>
endobj
324 0 obj
<<
/S /D /St 43
>>
endobj
325 0 obj
<<
/S /D /St 44
>>
endobj
326 0 obj
<<
/S /D /St 45
>>
endobj
327 0 obj
<<
/S /D /St 46
>>
endobj
328 0 obj
<<
/S /D /St 47
>>
endobj
329 0 obj
<<
/S /D /St 48
>>
endobj
330 0 obj
<<
/S /D /St 49
>>
endobj
331 0 obj
<<
/S /D /St 50
>>
endobj
332 0 obj
<<
/S /D /St 51
>>
endobj
333 0 obj
<<
/S /D /St 52
>>
endobj
334 0 obj
<<
/S /D /St 53
>>
endobj
335 0 obj
<<
/S /D /St 54
>>
endobj
336 0 obj
<<
/S /D /St 55
>>
endobj
337 0 obj
<<
/S /D /St 56
>>
endobj
338 0 obj
<<
/S /D /St 57
>>
endobj
xref
0 339
0000000000 65535 f 
0000000073 00000 n 
0000000159 00000 n 
0000000266 00000 n 
0000000378 00000 n 
0000000565 00000 n 
0000000790 00000 n 
0000000958 00000 n 
0000001126 00000 n 
0000001294 00000 n 
0000001462 00000 n 
0000001631 00000 n 
0000001800 00000 n 
0000001969 00000 n 
0000002138 00000 n 
0000002307 00000 n 
0000002476 00000 n 
0000002645 00000 n 
0000002814 00000 n 
0000002983 00000 n 
0000003152 00000 n 
0000003321 00000 n 
0000003490 00000 n 
0000003659 00000 n 
0000003828 00000 n 
0000003997 00000 n 
0000004166 00000 n 
0000004336 00000 n 
0000004506 00000 n 
0000004676 00000 n 
0000004846 00000 n 
0000005016 00000 n 
0000005186 00000 n 
0000005356 00000 n 
0000005526 00000 n 
0000005696 00000 n 
0000005866 00000 n 
0000006036 00000 n 
0000006206 00000 n 
0000006376 00000 n 
0000006546 00000 n 
0000006716 00000 n 
0000006886 00000 n 
0000007056 00000 n 
0000007226 00000 n 
0000007396 00000 n 
0000007566 00000 n 
0000007736 00000 n 
0000007906 00000 n 
0000008076 00000 n 
0000008246 00000 n 
0000008416 00000 n 
0000008586 00000 n 
0000008756 00000 n 
0000008926 00000 n 
0000009096 00000 n 
0000009266 00000 n 
0000009436 00000 n 
0000009606 00000 n 
0000009776 00000 n 
0000009946 00000 n 
0000010116 00000 n 
0000010286 00000 n 
0000010456 00000 n 
0000010626 00000 n 
0000010796 00000 n 
0000010966 00000 n 
0000011136 00000 n 
0000011306 00000 n 
0000011494 00000 n 
0000012169 00000 n 
0000012289 00000 n 
0000012468 00000 n 
0000012658 00000 n 
0000012846 00000 n 
0000013087 00000 n 
0000013291 00000 n 
0000013479 00000 n 
0000013713 00000 n 
0000013883 00000 n 
0000013989 00000 n 
0000014177 00000 n 
0000014411 00000 n 
0000014599 00000 n 
0000014826 00000 n 
0000015014 00000 n 
0000015241 00000 n 
0000015429 00000 n 
0000015656 00000 n 
0000015844 00000 n 
0000016071 00000 n 
0000016259 00000 n 
0000016486 00000 n 
0000016602 00000 n 
0000016790 00000 n 
0000017017 00000 n 
0000017205 00000 n 
0000017432 00000 n 
0000017620 00000 n 
0000017847 00000 n 
0000018035 00000 n 
0000018263 00000 n 
0000018452 00000 n 
0000018681 00000 n 
0000018870 00000 n 
0000019099 00000 n 
0000019288 00000 n 
0000019517 00000 n 
0000019706 00000 n 
0000019935 00000 n 
0000020124 00000 n 
0000020353 00000 n 
0000020542 00000 n 
0000020771 00000 n 
0000020960 00000 n 
0000021189 00000 n 
0000021378 00000 n 
0000021607 00000 n 
0000021796 00000 n 
0000022025 00000 n 
0000022214 00000 n 
0000022443 00000 n 
0000022632 00000 n 
0000022861 00000 n 
0000023050 00000 n 
0000023279 00000 n 
0000023468 00000 n 
0000023697 00000 n 
0000023886 00000 n 
0000024115 00000 n 
0000024304 00000 n 
0000024533 00000 n 
0000024722 00000 n 
0000024951 00000 n 
0000025140 00000 n 
0000025369 00000 n 
0000025558 00000 n 
0000025787 00000 n 
0000025976 00000 n 
0000026205 00000 n 
0000026394 00000 n 
0000026623 00000 n 
0000026812 00000 n 
0000027041 00000 n 
0000027230 00000 n 
0000027459 00000 n 
0000027648 00000 n 
0000027877 00000 n 
0000028066 00000 n 
0000028295 00000 n 
0000028484 00000 n 
0000028713 00000 n 
0000028902 00000 n 
0000029131 00000 n 
0000029320 00000 n 
0000029549 00000 n 
0000029738 00000 n 
0000029967 00000 n 
0000030156 00000 n 
0000030385 00000 n 
0000030574 00000 n 
0000030803 00000 n 
0000030992 00000 n 
0000031221 00000 n 
0000031410 00000 n 
0000031639 00000 n 
0000031828 00000 n 
0000032057 00000 n 
0000032246 00000 n 
0000032475 00000 n 
0000032664 00000 n 
0000032893 00000 n 
0000033082 00000 n 
0000033311 00000 n 
0000033500 00000 n 
0000033729 00000 n 
0000033918 00000 n 
0000034147 00000 n 
0000034336 00000 n 
0000034565 00000 n 
0000034754 00000 n 
0000034983 00000 n 
0000035172 00000 n 
0000035401 00000 n 
0000035590 00000 n 
0000035819 00000 n 
0000035989 00000 n 
0000036074 00000 n 
0000036263 00000 n 
0000036500 00000 n 
0000036610 00000 n 
0000036919 00000 n 
0000036997 00000 n 
0000037240 00000 n 
0000037472 00000 n 
0000037713 00000 n 
0000037965 00000 n 
0000038418 00000 n 
0000038670 00000 n 
0000038952 00000 n 
0000039314 00000 n 
0000039690 00000 n 
0000040052 00000 n 
0000040335 00000 n 
0000040698 00000 n 
0000041075 00000 n 
0000041452 00000 n 
0000041829 00000 n 
0000042152 00000 n 
0000042464 00000 n 
0000042732 00000 n 
0000043080 00000 n 
0000043447 00000 n 
0000043800 00000 n 
0000044068 00000 n 
0000044416 00000 n 
0000044778 00000 n 
0000045140 00000 n 
0000045488 00000 n 
0000045740 00000 n 
0000045984 00000 n 
0000046202 00000 n 
0000046420 00000 n 
0000046623 00000 n 
0000047136 00000 n 
0000048030 00000 n 
0000056315 00000 n 
0000059273 00000 n 
0000061227 00000 n 
0000068703 00000 n 
0000072867 00000 n 
0000074347 00000 n 
0000075263 00000 n 
0000078171 00000 n 
0000085896 00000 n 
0000091977 00000 n 
0000097941 00000 n 
0000102850 00000 n 
0000104819 00000 n 
0000111228 00000 n 
0000117372 00000 n 
0000122712 00000 n 
0000128332 00000 n 
0000133010 00000 n 
0000139792 00000 n 
0000145123 00000 n 
0000150644 00000 n 
0000155133 00000 n 
0000156872 00000 n 
0000159117 00000 n 
0000164382 00000 n 
0000170261 00000 n 
0000177876 00000 n 
0000184539 00000 n 
0000190566 00000 n 
0000196356 00000 n 
0000202004 00000 n 
0000207704 00000 n 
0000208731 00000 n 
0000213932 00000 n 
0000218815 00000 n 
0000223451 00000 n 
0000229755 00000 n 
0000234411 00000 n 
0000239951 00000 n 
0000245119 00000 n 
0000251339 00000 n 
0000256770 00000 n 
0000263220 00000 n 
0000267539 00000 n 
0000271650 00000 n 
0000277464 00000 n 
0000283360 00000 n 
0000289532 00000 n 
0000293370 00000 n 
0000298608 00000 n 
0000302444 00000 n 
0000305437 00000 n 
0000306605 00000 n 
0000315835 00000 n 
0000316796 00000 n 
0000318390 00000 n 
0000319073 00000 n 
0000319108 00000 n 
0000319143 00000 n 
0000319178 00000 n 
0000319213 00000 n 
0000319248 00000 n 
0000319283 00000 n 
0000319318 00000 n 
0000319353 00000 n 
0000319388 00000 n 
0000319424 00000 n 
0000319460 00000 n 
0000319496 00000 n 
0000319532 00000 n 
0000319568 00000 n 
0000319604 00000 n 
0000319640 00000 n 
0000319676 00000 n 
0000319712 00000 n 
0000319748 00000 n 
0000319784 00000 n 
0000319820 00000 n 
0000319856 00000 n 
0000319892 00000 n 
0000319928 00000 n 
0000319964 00000 n 
0000320000 00000 n 
0000320036 00000 n 
0000320072 00000 n 
0000320108 00000 n 
0000320144 00000 n 
0000320180 00000 n 
0000320216 00000 n 
0000320252 00000 n 
0000320288 00000 n 
0000320324 00000 n 
0000320360 00000 n 
0000320396 00000 n 
0000320432 00000 n 
0000320468 00000 n 
0000320504 00000 n 
0000320540 00000 n 
0000320576 00000 n 
0000320612 00000 n 
0000320648 00000 n 
0000320684 00000 n 
0000320720 00000 n 
0000320756 00000 n 
0000320792 00000 n 
0000320828 00000 n 
0000320864 00000 n 
0000320900 00000 n 
0000320936 00000 n 
0000320972 00000 n 
0000321008 00000 n 
0000321044 00000 n 
0000321080 00000 n 
trailer
<<
/ID 
[<4b73e4522c664f1529623c9b80aee0c2><4b73e4522c664f1529623c9b80aee0c2>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 190 0 R
/Root 189 0 R
/Size 339
>>
startxref
321116
%%EOF
